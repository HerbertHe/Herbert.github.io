import{_ as s,c as a,o as e,a6 as n,aq as o}from"./chunks/framework.CwsuCNZ2.js";const h=JSON.parse('{"title":"记一次JS线程问题","description":"","frontmatter":{"title":"记一次JS线程问题","date":"2020-01-30T16:55:42.000Z","toc":true,"tags":["JavaScript","Promise","JS线程","异步编程"]},"headers":[],"relativePath":"posts/zh/记一次JS线程问题.md","filePath":"posts/zh/记一次JS线程问题.md"}'),l={name:"posts/zh/记一次JS线程问题.md"},p=n('<h2 id="遇到的错误" tabindex="-1">遇到的错误 <a class="header-anchor" href="#遇到的错误" aria-label="Permalink to &quot;遇到的错误&quot;">​</a></h2><p><img src="'+o+`" alt="错误图片"></p><p>正如你所见的，报了一个<code>value below was evaluated just now</code>的信息，意味着我拿到的是原来的数据而不是最新的，下面伴随一些demo来看看这个问题。</p><h2 id="问题的引出" tabindex="-1">问题的引出 <a class="header-anchor" href="#问题的引出" aria-label="Permalink to &quot;问题的引出&quot;">​</a></h2><p>问题最早来源于我想拿到<code>Promise</code>里面返回的数据，所使用的是<code>React</code>并使用<code>Axios</code>来访问请求，<code>Axios</code>为http的异步请求。这里使用的是<code>GitHub</code>和<code>Gitee</code>的接口，请求得到当前的指定用户的关注、关注者、Star的仓库和自己仓库的数据量。具体的示例可以参考PC版的 <a href="https://server.jieec.cn" target="_blank" rel="noreferrer">Jieec Server</a>（目前没有在移动端上适配个人信息相关的，用media隐藏掉了）<strong>目前这个问题并未完全解决</strong></p><blockquote><p>全站代码都已经开源，可以在<a href="https://github.com/HerbertHe/JieecServerPage" target="_blank" rel="noreferrer">HerbertHe/JieecServerPage</a>获取</p></blockquote><p>因为每次API请求的数据获取有限制，然后就使用了<code>分页</code>的操作，并且使用了循环的操作。</p><h2 id="第一个问题-如何降低react中异步更新状态的次数" tabindex="-1">第一个问题：如何降低<code>React</code>中异步更新状态的次数 <a class="header-anchor" href="#第一个问题-如何降低react中异步更新状态的次数" aria-label="Permalink to &quot;第一个问题：如何降低\`React\`中异步更新状态的次数&quot;">​</a></h2><p>最开始，我是直接在<code>Axios</code>的<code>.then</code>直接使用了<code>this.setState()</code>的方法，这样直接在获取数据之后直接渲染DOM，这样会导致页面的重复更新。<strong>更重要</strong>的问题是<code>this.setState()</code>这个方法也是<strong>异步</strong>的！</p><blockquote><p>demo如下：</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#8FBCBB;"> Axios</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">axios</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// .....省略组件定义.....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88C0D0;">constructor</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">    super</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">props</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">    this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">state</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#88C0D0;">        result</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 0</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> =</span><span style="color:#B48EAD;"> 1</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#B48EAD;"> 4</span><span style="color:#81A1C1;">;</span><span style="color:#D8DEE9;"> i</span><span style="color:#81A1C1;">++</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">    Axios</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">https://api.github.com/users/HerbertHe/followers?page=</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">i</span><span style="color:#81A1C1;">}</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">res</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">res</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">data</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length </span><span style="color:#81A1C1;">!==</span><span style="color:#B48EAD;"> 0</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">                this</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setState</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#88C0D0;">                    result</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> this</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">state</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">result</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9;"> res</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">data</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">length</span></span>
<span class="line"><span style="color:#ECEFF4;">                }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">            }</span></span>
<span class="line"><span style="color:#ECEFF4;">        }</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    )</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>因为<code>this.setState()</code>的操作是异步的，那么问题来了，我根本拿不到最新的<code>this.state.result</code>的值。就意味着<code>setState()</code>设置的值根本不能确定是不是少算了，并且受执行的时刻影响，就真的是&quot;薛定谔的猫了&quot;</p><h2 id="第二个问题-如何抽离请求的代码" tabindex="-1">第二个问题：如何抽离请求的代码 <a class="header-anchor" href="#第二个问题-如何抽离请求的代码" aria-label="Permalink to &quot;第二个问题：如何抽离请求的代码&quot;">​</a></h2><p>参考这个commit<a href="https://github.com/HerbertHe/JieecServerPage/commit/d28a5ebf3d47cd4e090208773f3bade28a499945#r37037127" target="_blank" rel="noreferrer">d28a5ebf3d47cd4e090208773f3bade28a499945</a>，太多的<code>Axios</code>请求导致代码越来越冗余，由于项目是小项目并没有使用<code>Redux</code>进行状态管理，而是单独抽取了一个文件<a href="https://github.com/HerbertHe/JieecServerPage/blob/master/src/Components/githubAndGiteeData.js" target="_blank" rel="noreferrer">githubAndGiteeData.js</a>，数据使用了<code>_data</code>这样一个全局变量做 统一管理，然后<code>export default GetReq()</code>这个函数供外部使用。参考<a href="https://github.com/HerbertHe/JieecServerPage/commit/01805298a39a90a3feae5d7770d6d3ab8c25d78e#r37037265" target="_blank" rel="noreferrer">commit</a></p><h2 id="第三个问题-获取promise的返回值" tabindex="-1">第三个问题：获取Promise的返回值 <a class="header-anchor" href="#第三个问题-获取promise的返回值" aria-label="Permalink to &quot;第三个问题：获取Promise的返回值&quot;">​</a></h2><p><code>Axios</code>是一个Promise，取值需要在<code>.then</code>之中，因为作用域的问题，对于更新值使用了<code>setter</code>这样的方法，在<code>Axios</code>返回之后做一个记录，从而异步操作数据和重复的DOM渲染问题。参考<a href="https://github.com/HerbertHe/JieecServerPage/blob/master/src/Components/githubAndGiteeData.js" target="_blank" rel="noreferrer">githubAndGiteeData.js</a>。</p><h2 id="第四个问题-上面引言的错误如何解决" tabindex="-1">第四个问题：上面引言的错误如何解决 <a class="header-anchor" href="#第四个问题-上面引言的错误如何解决" aria-label="Permalink to &quot;第四个问题：上面引言的错误如何解决&quot;">​</a></h2><p>最开始的代码是直接调用<code>GetReq</code>的方法并且<code>console.log()</code>打印了值，也就出现了上面图的报错，我打印的并不是最新的值。后来我才意识到虽然<code>js</code>是单线程的，但是它有协程的存在，函数的执行时机是很有影响的。</p><blockquote><p>可以参考这篇文章<a href="https://www.jianshu.com/p/8821c6432fe1" target="_blank" rel="noreferrer">彻底明白 JS 线程</a></p></blockquote><p>然后参考CSDN做了一个简单而粗暴的解决办法，可以参考commit<a href="https://github.com/HerbertHe/JieecServerPage/commit/01805298a39a90a3feae5d7770d6d3ab8c25d78e#r37037489" target="_blank" rel="noreferrer">01805298a39a90a3feae5d7770d6d3ab8c25d78e</a>，通过设置<code>setTimeout()</code>的方式强行延时处理设置状态渲染DOM</p><h2 id="更多的问题和预想解决方案" tabindex="-1">更多的问题和预想解决方案 <a class="header-anchor" href="#更多的问题和预想解决方案" aria-label="Permalink to &quot;更多的问题和预想解决方案&quot;">​</a></h2><p>上面设置定时器处理很依赖API的响应时间，如果API响应很慢的话，会导致渲染数据不准确的情况（已经发现，主要是GitHub API真的不好确认时间）；如果设的时间过长，用户体验会大打折扣。</p><blockquote><p>目前预想的解决方案是利用<code>React</code>提供的下一个生命周期函数来获取数据，具体需要更多的尝试。</p></blockquote>`,23),r=[p];function t(c,i,d,E,b,y){return e(),a("div",null,r)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
