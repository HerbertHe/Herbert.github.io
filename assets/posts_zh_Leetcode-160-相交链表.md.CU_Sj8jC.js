import{_ as s,c as n,o as a,a6 as l}from"./chunks/framework.CRmoCaTl.js";const F=JSON.parse('{"title":"Leetcode-160-相交链表","description":"","frontmatter":{"title":"Leetcode-160-相交链表","date":"2021-03-25T18:51:59.000Z","toc":true,"tags":["算法","面试"],"categories":["Leetcode"]},"headers":[],"relativePath":"posts/zh/Leetcode-160-相交链表.md","filePath":"posts/zh/Leetcode-160-相交链表.md"}'),p={name:"posts/zh/Leetcode-160-相交链表.md"},e=l(`<h2 id="相交链表" tabindex="-1">相交链表 <a class="header-anchor" href="#相交链表" aria-label="Permalink to &quot;相交链表&quot;">​</a></h2><p>题目: <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noreferrer">相交链表</a></p><h2 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h2><p>一开始面对这题, 第一反应就是暴力去解题了。看了一眼题解, 双指针的解法特别的优雅。</p><p>如果两个单链表有相同节点的话, 那两个链表的指针必然 <strong>headA --&gt; headB</strong> 和 <strong>headB --&gt; headA</strong> 过程中有相遇, 相遇的时候节点就是交叉的节点。</p><p>举个栗子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> headA</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> headB</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 4</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#D8DEE9FF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// pA: 4 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; null -&gt; 5 -&gt; 0 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; null</span></span>
<span class="line"><span style="color:#616E88;">// pB: 5 -&gt; 0 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; null -&gt; 4 -&gt; 1 -&gt; 8 -&gt; 4 -&gt; 5 -&gt; null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">/**</span></span>
<span class="line"><span style="color:#616E88;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#616E88;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#616E88;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#616E88;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#616E88;"> * }</span></span>
<span class="line"><span style="color:#616E88;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">/**</span></span>
<span class="line"><span style="color:#616E88;"> * </span><span style="color:#ECEFF4;">@</span><span style="color:#8FBCBB;">param</span><span style="color:#ECEFF4;"> {</span><span style="color:#616E88;">ListNode</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9;"> headA</span></span>
<span class="line"><span style="color:#616E88;"> * </span><span style="color:#ECEFF4;">@</span><span style="color:#8FBCBB;">param</span><span style="color:#ECEFF4;"> {</span><span style="color:#616E88;">ListNode</span><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9;"> headB</span></span>
<span class="line"><span style="color:#616E88;"> * </span><span style="color:#ECEFF4;">@</span><span style="color:#8FBCBB;">return</span><span style="color:#ECEFF4;"> {</span><span style="color:#616E88;">ListNode</span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#616E88;"> */</span></span>
<span class="line"><span style="color:#81A1C1;">var</span><span style="color:#88C0D0;"> getIntersectionNode</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> function</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">headA</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> headB</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">headA</span><span style="color:#81A1C1;"> ===</span><span style="color:#81A1C1;"> null</span><span style="color:#81A1C1;"> ||</span><span style="color:#D8DEE9;"> headB</span><span style="color:#81A1C1;"> ===</span><span style="color:#81A1C1;"> null</span><span style="color:#D8DEE9FF;">) </span><span style="color:#81A1C1;">return</span><span style="color:#81A1C1;"> null</span></span>
<span class="line"><span style="color:#81A1C1;">    let</span><span style="color:#D8DEE9;"> pA</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> headA</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> pB</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> headB</span></span>
<span class="line"><span style="color:#81A1C1;">    while</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">pA</span><span style="color:#81A1C1;"> !==</span><span style="color:#D8DEE9;"> pB</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">        pA</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> pA</span><span style="color:#81A1C1;"> ===</span><span style="color:#81A1C1;"> null</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> headB</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> pA</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">next</span></span>
<span class="line"><span style="color:#D8DEE9;">        pB</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> pB</span><span style="color:#81A1C1;"> ===</span><span style="color:#81A1C1;"> null</span><span style="color:#81A1C1;"> ?</span><span style="color:#D8DEE9;"> headA</span><span style="color:#81A1C1;"> :</span><span style="color:#D8DEE9;"> pB</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">next</span></span>
<span class="line"><span style="color:#D8DEE9;">        console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">pA</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> pA</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#D8DEE9;">        console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">pB</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> pB</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9;"> pA</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 控制台输出:</span></span>
<span class="line"><span style="color:#616E88;">// pA [1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [6,1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA null</span></span>
<span class="line"><span style="color:#616E88;">// pB [5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [5,6,1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB null</span></span>
<span class="line"><span style="color:#616E88;">// pA [6,1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [4,1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [1,8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pA [8,4,5]</span></span>
<span class="line"><span style="color:#616E88;">// pB [8,4,5]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div>`,9),o=[e];function r(c,t,E,i,y,b){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{F as __pageData,u as default};
