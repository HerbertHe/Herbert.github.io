import{_ as s,c as a,o as e,a6 as n}from"./chunks/framework.CRmoCaTl.js";const m=JSON.parse('{"title":"M系列芯片MacOS初始化esp-idf环境指北","description":"","frontmatter":{"title":"M系列芯片MacOS初始化esp-idf环境指北","date":"2024-09-08T23:29:37.000Z","toc":true,"tags":["esp-idf","macos","esp32","esp32s3"]},"headers":[],"relativePath":"posts/zh/M系列芯片MacOS初始化esp-idf环境指北.md","filePath":"posts/zh/M系列芯片MacOS初始化esp-idf环境指北.md"}'),l={name:"posts/zh/M系列芯片MacOS初始化esp-idf环境指北.md"},p=n(`<h2 id="写在前面的" tabindex="-1">写在前面的 <a class="header-anchor" href="#写在前面的" aria-label="Permalink to &quot;写在前面的&quot;">​</a></h2><p>在很多年不搞硬件开发的今天，Arduino 是我去实现最小 demo 和一些创意想法的首选。得益于乐鑫 ESP32 系列芯片的低价格，这同样也是我做小的创意的首选。但噩梦的开始就是，选择了一款第三方的集成 ESP32S3 和 LCD 屏的开发板，Arduino 的 demo 看着很复杂。作为一名程序员，抱着 “知其然，要知其所以然” 的想法，开始尝试在我的 M1 MacOS 上搭建 esp-idf 环境，参考乐鑫官方的原生 API 和库进行开发。</p><blockquote><p>最主要的原因是，乐鑫官方的精力都在 esp-idf 上，Arduino 上比较慢。想从官方的 “较底层” 开始，但多年不搞硬件，不太熟悉了。</p></blockquote><h2 id="顺手解决一下-arduino-的环境问题" tabindex="-1">顺手解决一下 Arduino 的环境问题 <a class="header-anchor" href="#顺手解决一下-arduino-的环境问题" aria-label="Permalink to &quot;顺手解决一下 Arduino 的环境问题&quot;">​</a></h2><p>一般情况下，几乎所有淘宝的商家，在 Arduino 开发 esp32 的教程上都会给 esp32 的 GitHub 原生文件地址。但国内极差的网络环境，加上乐鑫官方的 json 文件指向大都是 GitHub 的 releases，因此就顺手写了个代理的项目 <a href="https://github.com/herberthe/arduino-esp32-mirror" target="_blank" rel="noreferrer">HerbertHe/arduino-esp32-mirror</a>。</p><p>可以用 <a href="https://ibert.me/arduino-esp32-mirror/package_esp32_index.json" target="_blank" rel="noreferrer">https://ibert.me/arduino-esp32-mirror/package_esp32_index.json</a> 替换乐鑫官方的 json 文件（每天自动更新一次）。</p><h2 id="搭建适配-m-系列芯片的-esp-idf-环境" tabindex="-1">搭建适配 M 系列芯片的 esp-idf 环境 <a class="header-anchor" href="#搭建适配-m-系列芯片的-esp-idf-环境" aria-label="Permalink to &quot;搭建适配 M 系列芯片的 esp-idf 环境&quot;">​</a></h2><p>参考了乐鑫官方的文档，但是这里面太多的坑。</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/get-started/linux-macos-setup.html" target="_blank" rel="noreferrer">Linux 和 macOS 平台工具链的标准设置</a></li></ul><h3 id="安装必要的依赖" tabindex="-1">安装必要的依赖 <a class="header-anchor" href="#安装必要的依赖" aria-label="Permalink to &quot;安装必要的依赖&quot;">​</a></h3><blockquote><p>默认 macOS 用户都有 Homebrew，并配置好了 Tuna 源。默认开启了 Apple Rosetta 2。</p></blockquote><ul><li>安装 CMake 和 Ninja：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">brew</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> cmake</span><span style="color:#A3BE8C;"> ninja</span><span style="color:#A3BE8C;"> dfu-util</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>安装 Python 3</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">brew</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> python3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>获取 ESP-IDF</li></ul><p>官方的文档如下：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">mkdir</span><span style="color:#A3BE8C;"> -p</span><span style="color:#A3BE8C;"> ~/esp</span></span>
<span class="line"><span style="color:#88C0D0;">cd</span><span style="color:#A3BE8C;"> ~/esp</span></span>
<span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> clone</span><span style="color:#A3BE8C;"> --recursive</span><span style="color:#A3BE8C;"> https://github.com/espressif/esp-idf.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>建议替换掉 <s><code>git clone --recursive https://github.com/espressif/esp-idf.git</code></s> 使用下面的命令：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> clone</span><span style="color:#A3BE8C;"> --recursive</span><span style="color:#A3BE8C;"> https://gitclone.com/github.com/espressif/esp-idf.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ESP-IDF 下载到 <code>~/esp/esp-idf</code> 目录下。</p><ul><li>设置工具</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">cd</span><span style="color:#A3BE8C;"> ~/esp/esp-idf</span></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#D8DEE9;"> IDF_GITHUB_ASSETS</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">dl.espressif.com/github_assets</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#616E88;"> # 使用乐鑫的下载渠道</span></span>
<span class="line"><span style="color:#88C0D0;">./install.sh</span><span style="color:#A3BE8C;"> esp32,esp32s3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>设置环境变量</li></ul><p>因为 macOS 默认的 shell 是 <code>zsh</code>，所以直接修改 <code>~/.zprofile</code> 文件来配置 alias 和激活虚拟环境。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">sudo</span><span style="color:#A3BE8C;"> nano</span><span style="color:#A3BE8C;"> ~/.zprofile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>向文件写入 <code>alias get_idf=&#39;. $HOME/esp/esp-idf/export.sh</code>，保存并退出。</p><ul><li>激活配置文件和虚拟环境</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">source</span><span style="color:#A3BE8C;"> ~/.zprofile</span><span style="color:#616E88;"> # 在当前环境激活配置文件</span></span>
<span class="line"><span style="color:#88C0D0;">get_idf</span><span style="color:#616E88;"> # 激活虚拟环境</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="然后就是噩梦的开始" tabindex="-1">然后就是噩梦的开始 <a class="header-anchor" href="#然后就是噩梦的开始" aria-label="Permalink to &quot;然后就是噩梦的开始&quot;">​</a></h3><p>结果一个 hello world 一编译就报错，看了一下报错日志，就是 submodule 的问题。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">cd</span><span style="color:#A3BE8C;"> ~/esp/esp-idf</span></span>
<span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> submodule</span><span style="color:#A3BE8C;"> sync</span></span>
<span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> submodule</span><span style="color:#A3BE8C;"> update</span><span style="color:#A3BE8C;"> --init</span><span style="color:#A3BE8C;"> --recursive</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一下一个不吱声，拉下来的时候各种报错。</p>`,33),o=[p];function r(i,t,c,d,u,b){return e(),a("div",null,o)}const y=s(l,[["render",r]]);export{m as __pageData,y as default};
