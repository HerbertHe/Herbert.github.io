import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.53d25516.js";const D=JSON.parse('{"title":"Leetcode-206-反转链表","description":"","frontmatter":{"title":"Leetcode-206-反转链表","date":"2021-03-23T15:31:27.000Z","toc":true,"tags":["算法","面试"],"categories":["Leetcode"]},"headers":[],"relativePath":"posts/zh/Leetcode-206-反转链表.md","filePath":"posts/zh/Leetcode-206-反转链表.md"}'),p={name:"posts/zh/Leetcode-206-反转链表.md"},e=l(`<h2 id="反转链表" tabindex="-1">反转链表 <a class="header-anchor" href="#反转链表" aria-label="Permalink to &quot;反转链表&quot;">​</a></h2><p>题见: <a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noreferrer">反转链表</a></p><h2 id="破题" tabindex="-1">破题 <a class="header-anchor" href="#破题" aria-label="Permalink to &quot;破题&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span></span>
<span class="line"><span style="color:#e1e4e8;">输出: 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span></span>
<span class="line"><span style="color:#24292e;">输出: 5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL</span></span></code></pre></div><p>注释给的定义为</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val, next) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = (next===undefined ? null : next)</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val, next) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = (next===undefined ? null : next)</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div><p>题解中给的遍历很好理解, 即把<code>next</code>指向上一个, 而当前的节点是下一个的上一个节点, 需要定义一个变量<code>prev</code>储存为下一个节点使用的上一个节点(也就是当前节点), 最后的返回值必定为最后保存的<code>prev</code>(此时迭代已经越界)</p><h2 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">head</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverseList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> curr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head  </span><span style="color:#6A737D;">// 初始化当前节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(curr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curr.next  </span><span style="color:#6A737D;">// 储存下一个节点, 需要反转</span></span>
<span class="line"><span style="color:#E1E4E8;">        curr.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prev  </span><span style="color:#6A737D;">// 反转链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curr  </span><span style="color:#6A737D;">// 保存反转之后的链表</span></span>
<span class="line"><span style="color:#E1E4E8;">        curr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next  </span><span style="color:#6A737D;">// 继续迭代</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 返回最后的最前</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">head</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverseList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> curr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head  </span><span style="color:#6A737D;">// 初始化当前节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(curr) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">next</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curr.next  </span><span style="color:#6A737D;">// 储存下一个节点, 需要反转</span></span>
<span class="line"><span style="color:#24292E;">        curr.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev  </span><span style="color:#6A737D;">// 反转链表</span></span>
<span class="line"><span style="color:#24292E;">        prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> curr  </span><span style="color:#6A737D;">// 保存反转之后的链表</span></span>
<span class="line"><span style="color:#24292E;">        curr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next  </span><span style="color:#6A737D;">// 继续迭代</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回最后的最前</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prev</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,9),o=[e];function t(c,r,y,i,E,d){return n(),a("div",null,o)}const h=s(p,[["render",t]]);export{D as __pageData,h as default};
