import{_ as s,c as n,o as a,a6 as e}from"./chunks/framework.BDSt01_6.js";const b=JSON.parse('{"title":"为HomeAssistant创建一个自定义组件","description":"","frontmatter":{"title":"为HomeAssistant创建一个自定义组件","date":"2024-03-24T13:56:09.000Z","toc":true,"tags":["homeassistant","ha","自定义组件","教程"]},"headers":[],"relativePath":"posts/zh/为HomeAssistant创建一个自定义组件.md","filePath":"posts/zh/$pin 为HomeAssistant创建一个自定义组件.md"}'),p={name:"posts/zh/为HomeAssistant创建一个自定义组件.md"},o=e(`<blockquote><p>更新于 2024-03-27</p></blockquote><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>关于 Home Assistant 的顶级玩法，可以去看看我的b站视频合集 <a href="https://space.bilibili.com/137683614/channel/collectiondetail?sid=2050382" target="_blank" rel="noreferrer">Home Assistant顶级玩法</a></p><blockquote><p>本教程为 Home Assistant 社区的文章翻译，原文链接为：<a href="https://community.home-assistant.io/t/tutorial-for-creating-a-custom-component/204793" target="_blank" rel="noreferrer">https://community.home-assistant.io/t/tutorial-for-creating-a-custom-component/204793</a>，作者：Aaron Godfrey。</p></blockquote><p>下面是原作者的帖子内容：</p><blockquote><p>我开始了一个如何为 HomeAssistant 创建自定义组件的教程。<a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_1/" target="_blank" rel="noreferrer">https://aarongodfrey.dev/home automation/building_a_home_assistant_custom_component_part_1/</a> 想要获得一些反馈，看看其中的一些内容是否有用，或者我是否忽略了一些显而易见的东西。</p></blockquote><ul><li><a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_1/" target="_blank" rel="noreferrer">第一部分 如何创建一个基础集成(integration)</a></li><li><a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_2/" target="_blank" rel="noreferrer">第二部分 讨论单元测试和持续集成</a></li><li><a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_3/" target="_blank" rel="noreferrer">第三部分 重点添加一个配置流(Config Flow)</a></li><li><a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_4/" target="_blank" rel="noreferrer">第四部分 重点添加一个选项流(Options Flow)</a></li><li><a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_5/" target="_blank" rel="noreferrer">第五部分 讨论使用 devcontainer 进行调试</a></li></ul><h2 id="构建一个-home-assistant-自定义组件" tabindex="-1">构建一个 Home Assistant 自定义组件 <a class="header-anchor" href="#构建一个-home-assistant-自定义组件" aria-label="Permalink to &quot;构建一个 Home Assistant 自定义组件&quot;">​</a></h2><h2 id="第一部分-项目结构和基础" tabindex="-1">第一部分：项目结构和基础 <a class="header-anchor" href="#第一部分-项目结构和基础" aria-label="Permalink to &quot;第一部分：项目结构和基础&quot;">​</a></h2><h3 id="摘要" tabindex="-1">摘要 <a class="header-anchor" href="#摘要" aria-label="Permalink to &quot;摘要&quot;">​</a></h3><p>这个系列的文章为一个教程，旨在教会我们为 Home Assistant 创建一个自定义组件。我们将从一个组件骨架开始，然后在每篇教程里添加内容。在本系列教程文章的最后，你将会拥有一个完整的功能组件，至少可以在 <a href="https://developers.home-assistant.io/docs/integration_quality_scale_index/" target="_blank" rel="noreferrer">集成质量衡量(Integration Quality Scale)</a> 中拿到 Sliver 级别的分数。</p><p>在这个项目中，我们将使用 <a href="https://developer.github.com/v3/" target="_blank" rel="noreferrer">GitHub API</a> 来为我们的组件提供数据。这已经有一个存在的 <a href="https://www.home-assistant.io/integrations/github/" target="_blank" rel="noreferrer">GitHub 集成</a>，但我们将自己去实现并尝试去通过单元测试去提升这个已有的组件质量。可以通过 UI 来进行配置，并添加一些实用的功能。</p><p>每篇文章都是 <a href="https://github.com/boralyl/github-custom-component-tutorial" target="_blank" rel="noreferrer">GitHub 仓库</a> 的不同分支。所以你可以在自己的编辑器中跟随学习，或者浏览适当分支中的代码。此部分的更改都可以在 <a href="https://github.com/boralyl/github-custom-component-tutorial/compare/feature/bare-repo...feature/part1?expand=1" target="_blank" rel="noreferrer">feature/part1 分支</a> 中查阅。</p><p>我建议去查阅官方的 <a href="https://developers.home-assistant.io/" target="_blank" rel="noreferrer">开发者文档</a>，从 Home Assistant 架构中的概念获得一些灵感。</p><h3 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h3><p>一开始，我们需要为自定义组件生成基础的文件。幸运的是，通过 <a href="https://github.com/boralyl/cookiecutter-homeassistant-component" target="_blank" rel="noreferrer">cookiecutter project template</a> 项目做这件事很容易。</p><p>让我们安装 <a href="https://github.com/cookiecutter/cookiecutter" target="_blank" rel="noreferrer">cokkiecutter</a>，并且通过问答的方式创建我们的工程。</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki nord vp-code"><code><span class="line"><span>$ pip install cookiecutter</span></span>
<span class="line"><span>$ cookiecutter https://github.com/boralyl/cookiecutter-homeassistant-component</span></span>
<span class="line"><span>domain [my_component]: github_custom</span></span>
<span class="line"><span>name [My Component]: Github Custom</span></span>
<span class="line"><span>docs_url [https://github.com/user/my_component/]: https://github.com/boralyl/github-custom-component-tutorial</span></span>
<span class="line"><span>owner [@user]: @boralyl</span></span>
<span class="line"><span>Select config_flow:</span></span>
<span class="line"><span>1 - yes</span></span>
<span class="line"><span>2 - no</span></span>
<span class="line"><span>Choose from 1, 2 [1]: 2</span></span>
<span class="line"><span>Select iot_class:</span></span>
<span class="line"><span>1 - Assumed State</span></span>
<span class="line"><span>2 - Cloud Polling</span></span>
<span class="line"><span>3 - Cloud Push</span></span>
<span class="line"><span>4 - Local Polling</span></span>
<span class="line"><span>5 - Local Push</span></span>
<span class="line"><span>Choose from 1, 2, 3, 4, 5 [1]: 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>注意：一开始我们跳过了使用配置流(Config Flow)。我们将在教程的后续文章中添加这部分功能。</p></blockquote><p><img src="https://aarongodfrey.dev/assets/images/0012_project_tree.png" alt="项目结构树"></p><p>现在我们忽略根目录文件夹下的文件和测试文件夹。让我们关注 <code>custom_components</code> 和<code>github_custom</code> 文件夹。<a href="https://developers.home-assistant.io/docs/creating_integration_manifest" target="_blank" rel="noreferrer">manifest.json</a> 包含了一些我们这个组件的基础信息，Home Assistant 在加载的时候会用到。<code>const.py</code> 只包含了我们的常量，在这个案例中，我们只有组件的 <a href="https://developers.home-assistant.io/docs/creating_integration_manifest#domain" target="_blank" rel="noreferrer">DOMAIN</a>。<code>__init__.py</code> 包含了 <code>async_setup</code> 方法，用于 Home Assistant 加载我们的组件。</p><p>此时自定义组件是合法的，如果你放在自己的 Home Assistant <code>config</code> 目录下，Home Assistant 会正常加载，并不会实际创建任何实体(entities)。</p><h3 id="实现组件" tabindex="-1">实现组件 <a class="header-anchor" href="#实现组件" aria-label="Permalink to &quot;实现组件&quot;">​</a></h3><p>现在，是时候开始编写我们的组件了。有四个基本部分去实现。</p><ol><li>在 <code>manifest.json</code> 添加我们的 requrements。如果我们需要添加额外的 python 依赖，就需要在这添加。</li><li>添加我们自己的配置规则。将用于定义我们希望用户添加进他们的 <code>configuration.yaml</code> 文件的值。</li><li>在 Home Assistant 中注册我们所有的传感器。将在 <code>async_setuo_platform</code> 函数中进行实现。</li><li>创建一个实体，用于代表我们希望手收集关于 GitHub 仓库的状态和数据。这个实体也应该实现 <code>async_update</code> 方法，从 GitHub 来更新数据。</li></ol><p>这四处的最终实现，可以看这个 <a href="https://github.com/boralyl/github-custom-component-tutorial/compare/feature/bare-repo...feature/part1?expand=1" target="_blank" rel="noreferrer">diff</a>。在这个 diff 中需要注意的是，我从 <code>__init__.py</code> 中移除了 <code>async_setup</code> 函数。因为我们集成使用了 platform，所以我们可以移除这部分的代码。这些 platforms 允许你在集成中拥有多个实例，而不是仅一个。如果你正在同时监控公共仓库和一些使用 GitHub Enterprise 服务的私有仓库，是非常有用的。</p><h3 id="向-manifest-json-添加-requirements" tabindex="-1">向 manifest.json 添加 requirements <a class="header-anchor" href="#向-manifest-json-添加-requirements" aria-label="Permalink to &quot;向 manifest.json 添加 requirements&quot;">​</a></h3><p>我们将使用 <a href="https://github.com/brettcannon/gidgethub" target="_blank" rel="noreferrer">gidgethub</a> 库来与 GitHub API 进行交互。它支持开箱即用的异步通信，可以非常简单直接使用。</p><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">  &quot;documentation&quot;: &quot;https://github.com/boralyl/github-custom-component-tutorial&quot;,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  &quot;domain&quot;: &quot;github_custom&quot;,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  &quot;name&quot;: &quot;Github Custom&quot;,</span></span>
<span class="line"><span style="color:#ECEFF4;">-</span><span style="color:#BF616A;">  &quot;requirements&quot;: []</span></span>
<span class="line"><span style="color:#ECEFF4;">+</span><span style="color:#A3BE8C;">  &quot;requirements&quot;: [&quot;gidgethub[aiohttp]==4.1.1&quot;]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们向 <code>requirements</code> 数组添加了指定版本的依赖。值得注意的是，指定一个异步库是可选的。为了保证这些依赖被正确安装，我们需要额外在 requirement 中额外指定 <code>aiohttp</code>。</p><h3 id="platform-配置方案" tabindex="-1">platform 配置方案 <a class="header-anchor" href="#platform-配置方案" aria-label="Permalink to &quot;platform 配置方案&quot;">​</a></h3><p>对于我们的 platform 配置方案来说，我们需要根据官方的 <a href="https://www.home-assistant.io/integrations/github/" target="_blank" rel="noreferrer">GitHub 集成</a> 来实现。下面是一个基础的示例：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;"># Example configuration.yaml entry</span></span>
<span class="line"><span style="color:#8FBCBB;">sensor</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">  -</span><span style="color:#8FBCBB;"> platform</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> github_custom</span></span>
<span class="line"><span style="color:#8FBCBB;">    access_token</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> !secret</span><span style="color:#A3BE8C;"> github_access_token</span></span>
<span class="line"><span style="color:#8FBCBB;">    repositories</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> path</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">home-assistant/core</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#8FBCBB;">        name</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">Home Assistant Core</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> path</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">boralyl/steam-wishlist</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">  -</span><span style="color:#8FBCBB;"> platform</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> github_custom</span></span>
<span class="line"><span style="color:#8FBCBB;">    url</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> https://my.enterprisegithubserver.com</span></span>
<span class="line"><span style="color:#8FBCBB;">    access_token</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> !secret</span><span style="color:#A3BE8C;"> github_access_token</span></span>
<span class="line"><span style="color:#8FBCBB;">    repositories</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> path</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">company/some-repo</span><span style="color:#ECEFF4;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们不需要去修改任何内容，所以配置方案与官方集成的完全一致：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki nord vp-code"><code><span class="line"><span>REPO_SCHEMA = vol.Schema(</span></span>
<span class="line"><span>    {vol.Required(CONF_PATH): cv.string, vol.Optional(CONF_NAME): cv.string}</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PLATFORM_SCHEMA = PLATFORM_SCHEMA.extend(</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        vol.Required(CONF_ACCESS_TOKEN): cv.string,</span></span>
<span class="line"><span>        vol.Required(CONF_REPOS): vol.All(cv.ensure_list, [REPO_SCHEMA]),</span></span>
<span class="line"><span>        vol.Optional(CONF_URL): cv.url,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的内容非常直观。我们需要一个 access token和一个仓库列表。每个仓库必须拥有 <code>path</code> 键，并且可以可选有一个 <code>name</code> 键。我们也可选地允许 <code>url</code> 键，用于指定 GitHub Enterprise 服务器的 URL。</p><p>上面的代码本质上扩展了 Home Assistant platform 配置方案，添加了我们自己的域名 <code>github_custom</code>。它将为我们处理认证和展示适当的错误。</p><h3 id="注册传感器-sensors" tabindex="-1">注册传感器(sensors) <a class="header-anchor" href="#注册传感器-sensors" aria-label="Permalink to &quot;注册传感器(sensors)&quot;">​</a></h3><p>下一步注册我们所有的传感器。将为在 platform 配置中的每一个仓库创建一个传感器。习惯上，Home Assistant 会查看你 <code>sensor.py</code> 文件中的 <code>setup_platform</code> 或者 <code>async_setup_platform</code> 函数。如果你的数据通过库来更新，使用 <a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noreferrer">asyncio</a> 来异步获取数据，那就需要使用 <code>async_setup_platform</code> 函数，否则应该创建 <code>setup_platform</code> 函数。自我们使用 <a href="https://github.com/brettcannon/gidgethub/" target="_blank" rel="noreferrer">gidgethub</a> 库，他就支持异步，所以我们使用 <code>async_setup_platform</code> 函数。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> async_setup_platform</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">    hass</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> HomeAssistantType</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    config</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> ConfigType</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    async_add_entities</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Callable</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    discovery_info</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Optional</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">DiscoveryInfoType</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> -&gt;</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Set up the sensor platform.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    session </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> async_get_clientsession</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">hass</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    github </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> GitHubAPI</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">session</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">requester</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> oauth_token</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">config</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_ACCESS_TOKEN</span><span style="color:#ECEFF4;">])</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    sensors </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> [</span><span style="color:#88C0D0;">GitHubRepoSensor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">github</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> repo</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> repo </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> config</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_REPOS</span><span style="color:#ECEFF4;">]]</span></span>
<span class="line"><span style="color:#88C0D0;">    async_add_entities</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">sensors</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> update_before_add</span><span style="color:#81A1C1;">=True</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个函数中，我们首先恢复了一个 aiohttp 客户端会话。这个帮助函数关注于为我们恢复和关闭会话（少了一件需要考虑的事情）。我们初始化了 GitHub API 客户端，并为在我们的 <code>configuration.yaml</code> 中指定的每个仓库创建了一个 <code>GitHubRepoSensor</code>。</p><p><code>async_add_entities</code> 函数将会处理在 Home Assistant 中添加和注册这些传感器。第二个参数也值得注意。将它设置为 <code>True</code> 的时候，是告诉 Home Assistant 应该在集成完成加载之后进行数据更新。没有这项配置（或者将它设置为 <code>False</code>），它将等待直到 <code>SCAN_INTERVAL</code> 的时候再从 GitHub 获取数据。这个常量被设置为 10 分钟，意味着在 Home Assistant 重启之后的十分钟，我们的传感器是没有数据的。（或者，它将在恢复重新启动之前的上一次更新的数据）</p><h3 id="github-仓库传感器实体和-async-update" tabindex="-1">GitHub 仓库传感器实体和 async_update <a class="header-anchor" href="#github-仓库传感器实体和-async-update" aria-label="Permalink to &quot;GitHub 仓库传感器实体和 async_update&quot;">​</a></h3><p>上一部分我们定义了组件的实体和指定了一个更新方法。简而言之，并没有包含完整的类（的代码），但你可以在 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/3ee4d35f4bb08ec92098e7932fd4ae29ef59591f/custom_components/github_custom/sensor.py#L98-L212" target="_blank" rel="noreferrer">GitHub</a> 中查看。</p><p>最主要的部分是它继承了 <code>homeassistant.helpers.entity.Entity</code>，这个类为你实现了必要的逻辑。我们定义自己的返回传感器的 <code>状态(state)</code> 属性。这个传感器，我们将使用 commit sha 的前7个字符。我们也定义了一个返回和状态相关的 <code>device_state_attributes</code> 的属性，可以被自动化(automations) 和 lovelace UI 所使用。</p><p>我们的自定义传感器类必须指定一个 <code>update</code> 或者 <code>async_update</code> 方法，为了从 GitHub 获取数据用于更新 state 和 device_state_attributes。再者，我们的组件使用了一个支持异步的库，包含了 <code>async_update</code> 方法，用于从 GitHub 获取需要的数据。Home Assistant 将基于我们定义的间隔调用这个方法，习惯上去寻找一个叫做 <code>SCAN_INTERVAL</code> 的常量。如果你在自己的文件中定义了它，它的值是一个 <code>datetime.timedelta</code> 实例。我们为自己的组件使用10分钟作为更新的间隔。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">SCAN_INTERVAL </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> timedelta</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">minutes</span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;">10</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>我们现在有了一个完整功能的异步自定义组件，是官方集成的提升版。</p><p>在后面的文章中，我们将简单的讨论如何去为帮助提升自定义组件，来添加单元测试和捕获 bugs。我们也会使用 <a href="https://github.com/features/actions" target="_blank" rel="noreferrer">GitHub Actions</a> 来为自定义组件添加持续集成。</p><h2 id="第二部分-单元测试和持续集成" tabindex="-1">第二部分：单元测试和持续集成 <a class="header-anchor" href="#第二部分-单元测试和持续集成" aria-label="Permalink to &quot;第二部分：单元测试和持续集成&quot;">​</a></h2><blockquote><p>原文链接：<a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_2/" target="_blank" rel="noreferrer">https://aarongodfrey.dev/home automation/building_a_home_assistant_custom_component_part_2/</a></p></blockquote><h3 id="摘要-1" tabindex="-1">摘要 <a class="header-anchor" href="#摘要-1" aria-label="Permalink to &quot;摘要&quot;">​</a></h3><p>这篇教程我们将讨论如何对自定义组件进行单元测试，并和 GitHub 的持续集成一起使用。我们仍然使用一样的示例项目 <a href="https://github.com/boralyl/github-custom-component-tutorial" target="_blank" rel="noreferrer">github-custom-component</a>，我已经为此添加了单元测试和一些持续集成的配置。你可以在 <a href="https://github.com/boralyl/github-custom-component-tutorial/compare/feature/part1...feature/part2?expand=1" target="_blank" rel="noreferrer">feature/part2 分支</a> 寻找这篇文章带来的差异。</p><h3 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><p>通常来说测试 Home Assistant 自定义组件并没有什么特殊之处，与其他的 python 项目的流程非常相似。然而，在某些情况下，访问一些 Home Assistant 的特定功能会使编写测试变得容易得多。</p><p>Home Assistant 有一堆测试工具集和 <a href="https://docs.pytest.org/en/latest/fixture.html" target="_blank" rel="noreferrer">pytest fixturew</a>，可以帮组我们对 <a href="https://github.com/home-assistant/core" target="_blank" rel="noreferrer">core repo</a> 写单元测试更加简单（比如获取 <code>hass</code> 实例），但是它们并没有被对外暴露，你可以完全不需要复制/粘贴代码直接进行使用。为了使这些对自定义组件的复用性，你可以下载 <a href="https://github.com/MatthewFlamm/pytest-homeassistant-custom-component" target="_blank" rel="noreferrer">pytest 插件</a> 可以提供这类特性。</p><p>如果你使用 <a href="https://github.com/boralyl/cookiecutter-homeassistant-component" target="_blank" rel="noreferrer">cookiecutter project template</a> 项目来为 Home Assistant 创建自定义组件，在你的 <code>requirements.test.txt</code> 中早已包含了这个依赖。如果需要在已经存在的组件中添加单元测试，你可以通过 pip 安装这个依赖。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">pip</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> pytest-homeassistant-custom-component</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>你不必去做任何额外的事情，<code>pytest-homeassistant-custom-component</code> 插件早已提供了 pytest fixtures 的权限。pytest 会自动获取知道这些，你可以直接在测试中进行使用。其中最有用的当属 <code>hass</code>，为我们提供了一个 <code>hass</code> 实例，可以用于测试环境的启动。当测试配置流的时候，这也非常有用。看看下面的例子：</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> test_flow_user_step_no_input</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">hass</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Test appropriate error when no input is provided.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    _result </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">flow</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_init</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        config_flow</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">DOMAIN</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> context</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">{</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">source</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    result </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">flow</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_configure</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        _result</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">flow_id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">],</span><span style="color:#D8DEE9;"> user_input</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">{}</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#81A1C1;">    assert</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">base</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">missing</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> ==</span><span style="color:#D8DEE9FF;"> result</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">errors</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>当 pytest 看到你测试函数的参数之时，它将基于名称和所有被注册的插件进行检查。<code>pytest-homeassistant-custom-component</code> 对此进行注册，当测试函数被调用的时候将在合适的时候进行初始化。现在我们可以通过配置流的不同的值来运行不同的步骤，并且断言返回的数据。在特定的 case，如果在配置流程中，用户没有配置组件提供任何输入，我们将测试并展示适当的错误。</p><p>另外来自 Home Assistant 非常有用的是，<code>pytest-homeassistant-custom-component</code> 提供了 <code>AsyncMock</code> 用于模拟从异步函数中返回值。在这个例子中，我们对 <code>github.getitem</code> 异步函数进行模拟，扔出一个异常。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">from</span><span style="color:#D8DEE9FF;"> pytest_homeassistant_custom_component</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">async_mock </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> AsyncMock</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> MagicMock</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">from</span><span style="color:#D8DEE9FF;"> custom_components</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">github_custom</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">sensor </span><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;"> GitHubRepoSensor</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> test_async_update_failed</span><span style="color:#ECEFF4;">():</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Tests a failed async_update.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    github </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> MagicMock</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    github</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">getitem </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> AsyncMock</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">side_effect</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">GitHubException</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">    sensor </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> GitHubRepoSensor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">github</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">homeassistant/core</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">})</span></span>
<span class="line"><span style="color:#81A1C1;">    await</span><span style="color:#D8DEE9FF;"> sensor</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_update</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    assert</span><span style="color:#D8DEE9FF;"> sensor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">available </span><span style="color:#81A1C1;">is</span><span style="color:#81A1C1;"> False</span></span>
<span class="line"><span style="color:#81A1C1;">    assert</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">homeassistant/core</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> ==</span><span style="color:#D8DEE9FF;"> sensor</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">attrs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在这个测试中，验证了当我们设置传感器的可用性为 <code>False</code>，<code>async_update</code> 函数是否抛出了异常。</p><p>我建议在 Home Assistant Core 中阅读一些 <a href="https://github.com/home-assistant/core/search?q=platinum&amp;unscoped_q=platinum" target="_blank" rel="noreferrer">platinum 质量等级</a> 的组件，以获取关于应该测试什么、如何去测试的灵感。写这篇文章时的推荐：</p><ul><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/brother" target="_blank" rel="noreferrer">Brother Printer</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/daikin" target="_blank" rel="noreferrer">Daikin AC</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/deconz" target="_blank" rel="noreferrer">deCONZ</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/elgato" target="_blank" rel="noreferrer">Elgato Key Light</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/gdacs" target="_blank" rel="noreferrer">Global Disaster Alert and Coordination System (GDACS)</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/geonetnz_quakes" target="_blank" rel="noreferrer">GeoNet NZ Quakes</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/homematicip_cloud" target="_blank" rel="noreferrer">HomematicIP Cloud</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/hue" target="_blank" rel="noreferrer">Philips Hue</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/ipp" target="_blank" rel="noreferrer">Internet Printing Protocol (IPP)</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/nws" target="_blank" rel="noreferrer">National Weather Service (NWS)</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/pvpc_hourly_pricing" target="_blank" rel="noreferrer">Spain electricity hourly pricing (PVPC)</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/unifi" target="_blank" rel="noreferrer">Ubiquiti UniFi</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/vizio" target="_blank" rel="noreferrer">VIZIO SmartCast</a></li><li><a href="https://github.com/home-assistant/core/tree/dev/tests/components/wled" target="_blank" rel="noreferrer">WLED</a></li></ul><p>你也可以检查我如何在自己的自定义组件中实现的测试：</p><ul><li><a href="https://github.com/boralyl/github-custom-component-tutorial/tree/master/tests/" target="_blank" rel="noreferrer">github-custom-component-tutorial</a></li><li><a href="https://github.com/custom-components/sensor.nintendo_wishlist/tree/master/tests" target="_blank" rel="noreferrer">nintendo-wishlist</a></li><li><a href="https://github.com/boralyl/steam-wishlist/tree/master/tests" target="_blank" rel="noreferrer">steam-wishlist</a></li></ul><h3 id="持续集成" tabindex="-1">持续集成 <a class="header-anchor" href="#持续集成" aria-label="Permalink to &quot;持续集成&quot;">​</a></h3><p><a href="https://en.wikipedia.org/wiki/Continuous_integration" target="_blank" rel="noreferrer">持续集成</a> 允许你每次向仓库提交的时候进行各种检查（在其他任务中）。在这篇文章中，我将特别介绍 <a href="https://github.com/features/actions" target="_blank" rel="noreferrer">GitHub Actions</a>，但是你可以使用类似于 <a href="https://travis-ci.org/" target="_blank" rel="noreferrer">Travis CI</a> 这样的其他服务实现相同的效果。</p><p>你的 GitHub actions 将会被放置在仓库根目录结构的 <code>.github/workflows/</code> 下。每个工作流都是不同的运行任务，通常是在向 GitHub 推送代码的时候触发。</p><h3 id="hassfest" tabindex="-1">Hassfest <a class="header-anchor" href="#hassfest" aria-label="Permalink to &quot;Hassfest&quot;">​</a></h3><p><a href="https://www.github.com/ludeeus" target="_blank" rel="noreferrer">@ludeeus</a> 创建了一个 GitHub action 为你的组件进行验证。（也是超棒的 <a href="https://hacs.xyz/" target="_blank" rel="noreferrer">Home Assistant Store</a> 的背后实现）。看看在 <a href="https://developers.home-assistant.io/blog/2020/04/16/hassfest/" target="_blank" rel="noreferrer">Home Assistant Developers Blog</a> 上的文章了解更多信息。</p><p>下面是 <code>.github/workflows/hassfest.yaml</code> 的内容：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Validate with hassfest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">on</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">  push</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">  pull_request</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">  schedule</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">    -</span><span style="color:#8FBCBB;"> cron</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">0 0 * * *</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">jobs</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">  validate</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">    runs-on</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">ubuntu-latest</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#8FBCBB;">    steps</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> uses</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">actions/checkout@v2</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> uses</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> home-assistant/actions/hassfest@master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这个本质上是对你自定义组件的合法配置项进行检查。</p><h3 id="python-构建" tabindex="-1">Python 构建 <a class="header-anchor" href="#python-构建" aria-label="Permalink to &quot;Python 构建&quot;">​</a></h3><p>在我们 python 构建之中，我们想要在每次推送代码运行所有的单元测试。下面是 <code>.github/workflows/pythonpackage.yaml</code> 的内容：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Python package</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">on</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span><span style="color:#A3BE8C;">push</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">jobs</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">  build</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">    runs-on</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> ubuntu-latest</span></span>
<span class="line"><span style="color:#8FBCBB;">    strategy</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">      max-parallel</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 4</span></span>
<span class="line"><span style="color:#8FBCBB;">      matrix</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">        python-version</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> [</span><span style="color:#B48EAD;">3.7</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8FBCBB;">    steps</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> uses</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> actions/checkout@v1</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Set up Python \${{ matrix.python-version }}</span></span>
<span class="line"><span style="color:#8FBCBB;">        uses</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> actions/setup-python@v1</span></span>
<span class="line"><span style="color:#8FBCBB;">        with</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#8FBCBB;">          python-version</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> \${{ matrix.python-version }}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Set PY env</span></span>
<span class="line"><span style="color:#8FBCBB;">        run</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> echo &quot;::set-env name=PY::$(python -VV | sha256sum | cut -d&#39; &#39; -f1)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Install dependencies</span></span>
<span class="line"><span style="color:#8FBCBB;">        run</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> |</span></span>
<span class="line"><span style="color:#A3BE8C;">          python -m pip install --upgrade pip</span></span>
<span class="line"><span style="color:#A3BE8C;">          pip install -r requirements.test.txt</span></span>
<span class="line"><span style="color:#ECEFF4;">      -</span><span style="color:#8FBCBB;"> name</span><span style="color:#ECEFF4;">:</span><span style="color:#A3BE8C;"> Run pytest</span></span>
<span class="line"><span style="color:#8FBCBB;">        run</span><span style="color:#ECEFF4;">:</span><span style="color:#81A1C1;"> |</span></span>
<span class="line"><span style="color:#A3BE8C;">          pytest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在每次推送代码时，它将默认会把 python 的版本环境设置为 <code>3.7</code>。然后将下载我们所有的测试依赖，最终运行 <code>pytest</code> 执行我们的测试。如果测试没问题，构建将会成功完成，并且在你的 GitHub 提交信息之后获得一个绿色的成功检查标记。（这也代表了 <code>hassfest</code> 检查也成功了）</p><h3 id="预提交-pre-commit" tabindex="-1">预提交(Pre-Commit) <a class="header-anchor" href="#预提交-pre-commit" aria-label="Permalink to &quot;预提交(Pre-Commit)&quot;">​</a></h3><p><a href="https://pre-commit.com/" target="_blank" rel="noreferrer">预提交(Pre-Commit)</a> 在提交之前，提供了一个任意数量检查代码的方式。这将帮助去检查一些常见的问题，根据仓库和其他检查对代码进行规范。</p><p>如果你使用 cookie-cutter template，在你的生成代码中早已包含了<a href="https://github.com/boralyl/cookiecutter-homeassistant-component/blob/master/%7B%7B%20cookiecutter.domain%20%7D%7D/.pre-commit-config.yaml" target="_blank" rel="noreferrer"><code>.pre-commit-config.yaml</code></a>，其中包含了大部分 Home Assistant 核心使用的检查。在现有的组件中，可以简单的添加到你自己的项目之中，选用你想要去对代码进行的检查。</p><p>由 cookie-cutter template 生成的文件会帮助你的代码和 Home Assistant 标准更加兼容。当你向将组件合并到核心仓库的时候，省去很多麻烦。</p><p>开始如果没有的话，在你的仓库根目录添加 <code>.pre-commit-config.yaml</code>。然后安装 pre-commit。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">pip</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> pre-commit</span></span>
<span class="line"><span style="color:#88C0D0;">pre-commit</span><span style="color:#A3BE8C;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在，下次你进行提交的时候，它将运行所有的检查来检查你的试图提交，任一检查失败就将失败。一个成功的提交如下面的输出：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki nord vp-code"><code><span class="line"><span>$ git commit -a</span></span>
<span class="line"><span>pyupgrade..........................Passed</span></span>
<span class="line"><span>black..............................Passed</span></span>
<span class="line"><span>codespell..........................Passed</span></span>
<span class="line"><span>flake8.............................Passed</span></span>
<span class="line"><span>bandit.............................Passed</span></span>
<span class="line"><span>isort..............................Passed</span></span>
<span class="line"><span>Check JSON.........................Passed</span></span>
<span class="line"><span>mypy...............................Passed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>失败的检查可能像这样：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki nord vp-code"><code><span class="line"><span>$ git commit -a</span></span>
<span class="line"><span>pyupgrade........................(no files to check)Skipped</span></span>
<span class="line"><span>black............................(no files to check)Skipped</span></span>
<span class="line"><span>codespell........................Failed</span></span>
<span class="line"><span>- hook id: codespell</span></span>
<span class="line"><span>- exit code: 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>README.md:21: recommend  ==&gt; recommend</span></span>
<span class="line"><span></span></span>
<span class="line"><span>flake8...........................(no files to check)Skipped</span></span>
<span class="line"><span>bandit...........................(no files to check)Skipped</span></span>
<span class="line"><span>isort............................(no files to check)Skipped</span></span>
<span class="line"><span>Check JSON.......................(no files to check)Skipped</span></span>
<span class="line"><span>mypy.............................(no files to check)Skipped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>任何检查的失败都会打断你的提交，你需要对问题进行修复然后再次提交。如果一些原因你想进行提交并跳过检查，可以在提交的时候添加 <code>--no-verify</code> 标记。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">git</span><span style="color:#A3BE8C;"> commit</span><span style="color:#A3BE8C;"> -a</span><span style="color:#A3BE8C;"> --no-verify</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="结语-1" tabindex="-1">结语 <a class="header-anchor" href="#结语-1" aria-label="Permalink to &quot;结语&quot;">​</a></h3><p>在这篇文章中，我们接触了如何在自定义组件中开始单元测试，并将此与 GitHub 工作流的持续集成或者第三方解决方案连接起来。使用这些将会使你的自定义组件不仅更加健壮和无 bug，并且与 Home Assistant 核心代码的标准保持一致。</p><p>在下篇文章中，我们将关注于如何在 <a href="https://github.com/boralyl/github-custom-component-tutorial/" target="_blank" rel="noreferrer">github-custom-component-tutorial</a> 项目中添加 <a href="https://developers.home-assistant.io/docs/config_entries_config_flow_handler" target="_blank" rel="noreferrer">配置流Config Flow</a>。</p><h2 id="第三部分-配置流" tabindex="-1">第三部分：配置流 <a class="header-anchor" href="#第三部分-配置流" aria-label="Permalink to &quot;第三部分：配置流&quot;">​</a></h2><blockquote><p>原文链接：<a href="https://aarongodfrey.dev/home%20automation/building_a_home_assistant_custom_component_part_3/" target="_blank" rel="noreferrer">https://aarongodfrey.dev/home automation/building_a_home_assistant_custom_component_part_3/</a></p></blockquote><h3 id="摘要-2" tabindex="-1">摘要 <a class="header-anchor" href="#摘要-2" aria-label="Permalink to &quot;摘要&quot;">​</a></h3><p>在这篇文章中，我们将更新自定义组件，使之可以通过 UI 进行配置，通过添加 <a href="https://developers.home-assistant.io/docs/config_entries_config_flow_handler" target="_blank" rel="noreferrer">配置流</a> 进行实现。我们仍然使用相同的示例项目 <a href="https://github.com/boralyl/github-custom-component-tutorial" target="_blank" rel="noreferrer">github-component-tutorial</a>。你可以在 <a href="https://github.com/boralyl/github-custom-component-tutorial/compare/feature/part2...feature/part3" target="_blank" rel="noreferrer">feature/part3</a> 分支查看本篇文章带来的不同。</p><h3 id="更新-manifest-json" tabindex="-1">更新 manifest.json <a class="header-anchor" href="#更新-manifest-json" aria-label="Permalink to &quot;更新 manifest.json&quot;">​</a></h3><p>首先，我们需要更新 <code>manifest.json</code> 文件。将 <code>config_flow</code> 的值设为 <code>true</code>，这一步是让 Home Assistant 知道这个组件可以通过配置 UI 添加。</p><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">{</span></span>
<span class="line"><span style="color:#D8DEE9FF;">   &quot;codeowners&quot;: [&quot;@boralyl&quot;],</span></span>
<span class="line"><span style="color:#ECEFF4;">-</span><span style="color:#BF616A;">  &quot;config_flow&quot;: false,</span></span>
<span class="line"><span style="color:#ECEFF4;">+</span><span style="color:#A3BE8C;">  &quot;config_flow&quot;: true,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">   &quot;dependencies&quot;: [],</span></span>
<span class="line"><span style="color:#D8DEE9FF;">   &quot;documentation&quot;: &quot;https://github.com/boralyl/github-custom-component-tutorial&quot;,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">   &quot;domain&quot;: &quot;github_custom&quot;,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="添加配置流" tabindex="-1">添加配置流 <a class="header-anchor" href="#添加配置流" aria-label="Permalink to &quot;添加配置流&quot;">​</a></h3><p>接下来，我们将创建自己的 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/config_flow.py" target="_blank" rel="noreferrer">config_flow.py</a> 文件。在这这个文件中，我们将继承 <code>ConfigFlow</code> 类，并且定义当用户首次配置组件时所在 UI 展示的不同步骤。</p><p>截止本文撰写，通过配置流，拥有需要未知大小的配置值列表的组件并不是最简单的事情。为了绕过这个限制，我决定设计配置流有两个步骤。第一步是问询用户的 GitHub access token 和可选的 enterprise server URL。提交该信息后，用户将进入第二步，该步骤允许他们为其输入存储库和可选名称。为了允许用户添加额外的存储库，我添加了一个复选框，如果选中该复选框将重复第二步。用户可以重复多次去添加仓库，直到他们添加所有为创建传感器的仓库。</p><h3 id="用户步骤" tabindex="-1">用户步骤 <a class="header-anchor" href="#用户步骤" aria-label="Permalink to &quot;用户步骤&quot;">​</a></h3><p>当用户点击添加按钮和选择 GitHub Custom 集成的时候，我们配置流类的 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/config_flow.py#L55" target="_blank" rel="noreferrer">async_step_user</a> 方法将被调用。</p><p><img src="https://aarongodfrey.dev/assets/images/0014_init_flow.gif" alt="gif"></p><p>让我们看看那这个方法做了什么。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> async_step_user</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> user_input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Optional</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">Dict</span><span style="color:#ECEFF4;">[</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Any</span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Invoked when a user initiates a flow via the user interface.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    errors</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Dict</span><span style="color:#ECEFF4;">[</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> user_input </span><span style="color:#81A1C1;">is</span><span style="color:#81A1C1;"> not</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#81A1C1;">            await</span><span style="color:#88C0D0;"> validate_auth</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">user_input</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_ACCESS_TOKEN</span><span style="color:#ECEFF4;">],</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">hass</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">        except</span><span style="color:#8FBCBB;"> ValueError</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            errors</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">base</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">auth</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#81A1C1;"> not</span><span style="color:#D8DEE9FF;"> errors</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#616E88;">            # Input is valid, set data.</span></span>
<span class="line"><span style="color:#81A1C1;">            self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> user_input</span></span>
<span class="line"><span style="color:#81A1C1;">            self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_REPOS</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#616E88;">            # Return the form of the next step.</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_step_repo</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_show_form</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">        step_id</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data_schema</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">AUTH_SCHEMA</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> errors</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">errors</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在这一步首次被调用的时候，变量 <code>user_input</code> 的默认值为 <code>None</code>。当用户点击提交按钮的时候，变量的值将被填入一个包含他们输入数据的字典。Home Assistant 将基于你定义的数据结构代表你去做一些基本的验证检查。我添加了一些额外的验证方法，确保 access token 是合法的。如果失败了，我们将为 <code>auth</code> 设置基本错误。这个值与 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/strings.json#L4" target="_blank" rel="noreferrer">strings.json</a> 中的 errors 对象相关，将展示在此定义的描述。</p><p>如果没错误，数据将会被存储在类的 <code>self.data</code> 属性。除了存储输入的数据，我也为下一步添加的仓库初始化了一个空列表。最后，我们调用下一步的 <code>async_step_repo</code> 方法去推进用户进入第二步的表单，以输入他们所有想监控的仓库。</p><h3 id="仓库步骤" tabindex="-1">仓库步骤 <a class="header-anchor" href="#仓库步骤" aria-label="Permalink to &quot;仓库步骤&quot;">​</a></h3><p>在用户成功完成初始化步骤之后，<a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/config_flow.py#L74" target="_blank" rel="noreferrer">async_step_repo</a> 方法被调用。这一步是响应式展示输入仓库信息的表单。如果用户选择了 <code>Add another repo</code>，我们将在提交之后保存输入的数据并重置表单。</p><p><img src="https://aarongodfrey.dev/assets/images/0014_repo_flow.gif" alt="gif"></p><p>这个方法的逻辑和第一步的非常相似。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> async_step_repo</span><span style="color:#ECEFF4;">(</span><span style="color:#81A1C1;">self</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> user_input</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Optional</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">Dict</span><span style="color:#ECEFF4;">[</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> Any</span><span style="color:#ECEFF4;">]]</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Second step in config flow to add a repo to watch.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    errors</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> Dict</span><span style="color:#ECEFF4;">[</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">,</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> {}</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> user_input </span><span style="color:#81A1C1;">is</span><span style="color:#81A1C1;"> not</span><span style="color:#81A1C1;"> None</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#616E88;">        # Validate the path.</span></span>
<span class="line"><span style="color:#81A1C1;">        try</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#88C0D0;">            validate_path</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">user_input</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_PATH</span><span style="color:#ECEFF4;">])</span></span>
<span class="line"><span style="color:#81A1C1;">        except</span><span style="color:#8FBCBB;"> ValueError</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#D8DEE9FF;">            errors</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">base</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">invalid_path</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">        if</span><span style="color:#81A1C1;"> not</span><span style="color:#D8DEE9FF;"> errors</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#616E88;">            # Input is valid, set data.</span></span>
<span class="line"><span style="color:#81A1C1;">            self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_REPOS</span><span style="color:#ECEFF4;">].</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">                {</span></span>
<span class="line"><span style="color:#ECEFF4;">                    &quot;</span><span style="color:#A3BE8C;">path</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> user_input</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_PATH</span><span style="color:#ECEFF4;">],</span></span>
<span class="line"><span style="color:#ECEFF4;">                    &quot;</span><span style="color:#A3BE8C;">name</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> user_input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">CONF_NAME</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> user_input</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_PATH</span><span style="color:#ECEFF4;">]),</span></span>
<span class="line"><span style="color:#ECEFF4;">                }</span></span>
<span class="line"><span style="color:#ECEFF4;">            )</span></span>
<span class="line"><span style="color:#616E88;">            # If user ticked the box show this form again so they can add an</span></span>
<span class="line"><span style="color:#616E88;">            # additional repo.</span></span>
<span class="line"><span style="color:#81A1C1;">            if</span><span style="color:#D8DEE9FF;"> user_input</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">get</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">add_another</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> False</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#81A1C1;">                return</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_step_repo</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">            # User is done adding repos, create the config entry.</span></span>
<span class="line"><span style="color:#81A1C1;">            return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_create_entry</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">title</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">GitHub Custom</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data</span><span style="color:#81A1C1;">=self</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> self</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_show_form</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">        step_id</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">repo</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> data_schema</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">REPO_SCHEMA</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> errors</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">errors</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>一个关键的不同点是，如果 <code>add_another</code> 复选框被选中，我们将返回当前的步骤。当用户完成最后一步时，调用 <code>async_create_entry</code> 方法创建我们的 config entry 并在 Home Assistant 中注册。</p><h3 id="设置-config-entry" tabindex="-1">设置 Config Entry <a class="header-anchor" href="#设置-config-entry" aria-label="Permalink to &quot;设置 Config Entry&quot;">​</a></h3><p>下一件需要做的事情是，通过 config entry 设置我们创建的传感器。在 <code>__init__.py</code> 文件，我们定义了 <code>async_setup_entry</code> 函数将转发任务到 sensor platform。更多关于这如何工作的细节，我建议你去看非常棒的 <a href="https://developers.home-assistant.io/docs/config_entries_index/" target="_blank" rel="noreferrer">专题文档</a>。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> async_setup_entry</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">    hass</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> core</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">HomeAssistant</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> entry</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">ConfigEntry</span></span>
<span class="line"><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> -&gt;</span><span style="color:#88C0D0;"> bool</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Set up platform from a ConfigEntry.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">setdefault</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">DOMAIN</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> {})</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">DOMAIN</span><span style="color:#ECEFF4;">][</span><span style="color:#D8DEE9FF;">entry</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">entry_id</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9FF;"> entry</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">    # Forward the setup to the sensor platform.</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    hass</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_create_task</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_forward_entry_setup</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">entry</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">sensor</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#81A1C1;"> True</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在上面的方法中，我们在 hass 自己的 <code>DOMAIN</code> 字段下存储了 config entry 的数据。这样允许我们存储用户多次配置集成的 config entries。可能他们拥有一个 enterprise server 账户为了工作和一个常规的个人账户。他们可以设置两个不同的输入，连链接那些不同的情况。</p><p>我们将转发这些设置到 <code>sensor</code> platform。在 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/sensor.py" target="_blank" rel="noreferrer">sensor.py</a> 中，我们添加了一个接收 config entry 实例，并为组件创建传感器的 <code>async_setup_entry</code> 函数。你会注意到这个函数近似等同于下面的 <code>async_setup_platform</code> 函数，这个函数被用于从 <code>configuration.yaml</code> 设置传感器。唯一的区别是我们从 config entry 实例中获取配置数据。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> async_setup_entry</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">    hass</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> core</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">HomeAssistant</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    config_entry</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9FF;"> config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">ConfigEntry</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">    async_add_entities</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Setup sensors from a config entry created in the integrations UI.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    config </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">data</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">DOMAIN</span><span style="color:#ECEFF4;">][</span><span style="color:#D8DEE9FF;">config_entry</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">entry_id</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    session </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> async_get_clientsession</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">hass</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    github </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> GitHubAPI</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">session</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">requester</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> oauth_token</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">config</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_ACCESS_TOKEN</span><span style="color:#ECEFF4;">])</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    sensors </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> [</span><span style="color:#88C0D0;">GitHubRepoSensor</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">github</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> repo</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> for</span><span style="color:#D8DEE9FF;"> repo </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> config</span><span style="color:#ECEFF4;">[</span><span style="color:#D8DEE9FF;">CONF_REPOS</span><span style="color:#ECEFF4;">]]</span></span>
<span class="line"><span style="color:#88C0D0;">    async_add_entities</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">sensors</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> update_before_add</span><span style="color:#81A1C1;">=True</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="翻译" tabindex="-1">翻译 <a class="header-anchor" href="#翻译" aria-label="Permalink to &quot;翻译&quot;">​</a></h3><p>我简要创建了 <a href="https://github.com/boralyl/github-custom-component-tutorial/blob/master/custom_components/github_custom/strings.json" target="_blank" rel="noreferrer">strings.json</a> 用于解释错误是如何被定义的。这个文件包含了在配置流进程中被使用的字符串。我将 <code>strings.json</code> 文件复制到了 <code>translations</code> 文件夹下，并将其改为 <code>en.json</code> 表示因为翻译。你可以如你所想添加doge翻译文件，可以使用两个字符的 ISO 639-2 语言代码来命名。所有的字段必须和 <code>strings.json</code> 保持一致，其值为翻译后的字符串。举个例子，在我的组件里有另外的挪威语翻译：<a href="https://github.com/boralyl/steam-wishlist/blob/master/custom_components/steam_wishlist/translations/nb.json" target="_blank" rel="noreferrer">nb.json</a>。</p><p>获取更多在自定义组件中的翻译信息，查阅 <a href="https://developers.home-assistant.io/docs/internationalization/custom_integration/#translation-strings" target="_blank" rel="noreferrer">官方文档</a>。</p><h3 id="单元测试-1" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试-1" aria-label="Permalink to &quot;单元测试&quot;">​</a></h3><p>我想简要说一下如何对配置流进行单元测试。如果你安装和使用了 <a href="https://github.com/MatthewFlamm/pytest-homeassistant-custom-component" target="_blank" rel="noreferrer">pytest-homeassistant-custom-component</a>，你可以使用一些 pytest fixtures 来简化测试。</p><p>让我们看一看如果 GitHub access token 是非法的，如何进行验证并展示错误。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">@</span><span style="color:#D08770;">patch</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">custom_components.github_custom.config_flow.validate_auth</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#81A1C1;">async</span><span style="color:#81A1C1;"> def</span><span style="color:#88C0D0;"> test_flow_user_init_invalid_auth_token</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">m_validate_auth</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> hass</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span><span style="color:#A3BE8C;">Test errors populated when auth token is invalid.</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    m_validate_auth</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">side_effect </span><span style="color:#81A1C1;">=</span><span style="color:#8FBCBB;"> ValueError</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    _result </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">flow</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_init</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        config_flow</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">DOMAIN</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> context</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">{</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">source</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">user</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    result </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> await</span><span style="color:#D8DEE9FF;"> hass</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">config_entries</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9FF;">flow</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">async_configure</span><span style="color:#ECEFF4;">(</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        _result</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">flow_id</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">],</span><span style="color:#D8DEE9;"> user_input</span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;">{</span><span style="color:#D8DEE9FF;">CONF_ACCESS_TOKEN</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">bad</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span></span>
<span class="line"><span style="color:#ECEFF4;">    )</span></span>
<span class="line"><span style="color:#81A1C1;">    assert</span><span style="color:#ECEFF4;"> {</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">base</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">auth</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> ==</span><span style="color:#D8DEE9FF;"> result</span><span style="color:#ECEFF4;">[</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">errors</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个测试中，我们模拟了 <code>validate_auth</code> 函数，并使之扔出 <code>ValueError</code> 错误。从 <code>pytest-homeassistant-custom-component</code> 的 pytest fixture 来的 <code>hass</code> 参数，传给我们的测试函数。首先在 <code>user</code> 中，我们通过指定 domain 和步骤初始化了一个流。我们接着在流中运行那个步骤并传递用户输入。结果中包含了一个 <code>errors</code> 字段，我们断言匹配异常。</p><h3 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h3><p>通过这部分的代码，现在我们可以通过 UI 来设置和添加仓库，替代 <code>configuration.yaml</code> 文件。当你正在开发一个新的工作流，请确保在修改文件和重启 Home Assistant 之时，在浏览器中强制刷新。我注意到浏览器可以缓存信息，导致你看见过期的数据。</p><p>在我们的实现中，有一个明显的问题是，不通过初始化流的方式创建一个新的 config entry 的话，没法去移除或者添加新的仓库。虽然可以工作，但是非常不理想的是每次都得重新输入 GitHub access token。在下一篇文章中，我们将使用 <a href="https://developers.home-assistant.io/docs/config_entries_options_flow_handler" target="_blank" rel="noreferrer">OptionsFlowHandler</a> 去跳出这个限制。</p>`,136),l=[o];function t(r,c,i,E,F,y){return a(),n("div",null,l)}const m=s(p,[["render",t]]);export{b as __pageData,m as default};
