import{_ as n,E as s,c as o,b as i,w as e,am as l,a6 as t,o as r,J as h,a as c}from"./chunks/framework.CRmoCaTl.js";const y=JSON.parse('{"title":"unist","description":"","frontmatter":{"title":"unist","date":"2024-05-13T00:30:37.000Z","toc":true,"tags":["unist","unifiedjs","ast","mdast"]},"headers":[],"relativePath":"posts/zh/unist.md","filePath":"posts/zh/unist.md"}'),g={name:"posts/zh/unist.md"},p=t(`<h2 id="写在前面的" tabindex="-1">写在前面的 <a class="header-anchor" href="#写在前面的" aria-label="Permalink to &quot;写在前面的&quot;">​</a></h2><p>本篇文章是对 <a href="https://github.com/syntax-tree/unist" target="_blank" rel="noreferrer">unist</a> 仓库的官方内容翻译，原文地址: <a href="https://github.com/syntax-tree/unist" target="_blank" rel="noreferrer">https://github.com/syntax-tree/unist</a>。</p><p><img src="https://raw.githubusercontent.com/syntax-tree/unist/367da2e/logo.svg?sanitize=true" alt="unist"></p><p>unist, 即: <strong>Uni</strong>versal <strong>S</strong>yntax <strong>T</strong>ree.</p><p><strong>unist</strong> 是一个语法树规范。在 JavaScript 处理语法树上，拥有一个强大的 <a href="#工具集列表">工具集生态系统</a>。它的实现基于一些其他的规范。</p><p>这篇文档可能不会被发布。参考 <a href="https://github.com/syntax-tree/unist/releases" target="_blank" rel="noreferrer">releases</a> 页面获取已发布的文档。最新发布版本为 <a href="https://github.com/syntax-tree/unist/releases/tag/3.0.0" target="_blank" rel="noreferrer"><code>3.0.0</code></a>。</p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>这篇文章定义了一个通用的语法树格式。unist 的开发开始于 2015 年 7 月。本篇规范使用类 <a href="https://webidl.spec.whatwg.org" target="_blank" rel="noreferrer">Web IDL</a> 的语法进行书写。</p><h3 id="语法树" tabindex="-1">语法树 <a class="header-anchor" href="#语法树" aria-label="Permalink to &quot;语法树&quot;">​</a></h3><p>语法树是源代码或自然语言的表示。这些树是抽象的，使得它可以分析、转换和生成代码。</p><p>语法树有两种 <a href="https://eli.thegreenplace.net/2009/02/16/abstract-vs-concrete-syntax-trees/" target="_blank" rel="noreferrer">形式</a>：</p><ul><li><strong>具象语法树</strong>：表示每个细节（例如，空格不敏感语言中的空格）的结构。</li><li><strong>抽象语法树</strong>：只表示代码的语法结构相关的细节（例如，忽略语言是否都支持使用双引号或单引号，如 JavaScript）。</li></ul><p>本规范可以同时表示抽象和具象语法树。</p><h3 id="本规范的适用场景" tabindex="-1">本规范的适用场景 <a class="header-anchor" href="#本规范的适用场景" aria-label="Permalink to &quot;本规范的适用场景&quot;">​</a></h3><p>unist 并不趋向于自给自足。</p><p>相反，期望其他规范实现 unist 并扩展它以表示语言特定节点。</p><p>举个例子，请参阅如 <strong><a href="https://github.com/syntax-tree/hast" target="_blank" rel="noreferrer">hast</a></strong> (HTML)、<strong><a href="https://github.com/syntax-tree/nlcst" target="_blank" rel="noreferrer">nlcst</a></strong> (自然语言)、<strong><a href="https://github.com/syntax-tree/mdast" target="_blank" rel="noreferrer">mdast</a></strong> (Markdown) 和 <strong><a href="https://github.com/syntax-tree/xast" target="_blank" rel="noreferrer">xast</a></strong> (XML) 等项目。</p><p>unist 与 <a href="https://datatracker.ietf.org/doc/html/rfc7159" target="_blank" rel="noreferrer">JSON</a> 有关，因为兼容语法树可以完全被 JSON 表示。 然而，unist 并不受限于 JSON，可以表示其他数据格式，如 <a href="https://www.w3.org/TR/xml/" target="_blank" rel="noreferrer">XML</a>。</p><p>unist 与 <a href="https://262.ecma-international.org/9.0/" target="_blank" rel="noreferrer">JavaScript</a> 有关，因为它拥有丰富的 <a href="#工具集列表">工具集生态系统</a>，可通过 JavaScript 处理兼容语法树。 五个被使用最多的工具集加起来每个月会被下载三千万次。 然而，unist 并不受限于 JavaScript，可以用于其他编程语言。</p><p>unist 与 <a href="https://github.com/unifiedjs/unified" target="_blank" rel="noreferrer">unified</a>、<a href="https://github.com/remarkjs/remark" target="_blank" rel="noreferrer">remark</a>、<a href="https://github.com/rehypejs/rehype" target="_blank" rel="noreferrer">rehype</a>、<a href="https://github.com/retextjs/retext" target="_blank" rel="noreferrer">retext</a>、<a href="https://github.com/vfile/vfile" target="_blank" rel="noreferrer">vfile</a> 有关，因为它们都在其生态系统中使用 unist 语法树。</p><p>unist 与 <a href="https://github.com/vfile/vfile" target="_blank" rel="noreferrer">vfile</a> 有关，因为它接收 unist 节点作为消息存储，并且 vfile 可以作为语法树的源 <em><a href="#文件">文件</a></em>。</p><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><p>如果你正在使用 TypeScript，你可以通过 npm 安装 unist 类型：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">npm</span><span style="color:#A3BE8C;"> install</span><span style="color:#A3BE8C;"> @types/unist</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="节点-nodes" tabindex="-1">节点(Nodes) <a class="header-anchor" href="#节点-nodes" aria-label="Permalink to &quot;节点(Nodes)&quot;">​</a></h2><p>unist 语法树中的句法单元叫做节点(nodes)，它实现了 <strong><a href="#node">Node</a></strong> 接口。</p><h3 id="node" tabindex="-1"><code>Node</code> <a class="header-anchor" href="#node" aria-label="Permalink to &quot;\`Node\`&quot;">​</a></h3><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Node {</span></span>
<span class="line"><span>  type: string</span></span>
<span class="line"><span>  data: Data?</span></span>
<span class="line"><span>  position: Position?</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>type</code> 字段是一个非空字符串，表示节点的变体。 这个字段可以被用作确定 <em><a href="#类型">类型定义</a></em> 一个节点实现。</p><p><code>data</code> 字段表示来源于生态的信息。 <code>data</code> 字段的值实现 <strong><a href="#data">Data</a></strong> 接口。</p><p><code>position</code> 字段表示节点在源码文件中的位置。 <code>position</code> 字段的值实现 <strong><a href="#position">Position</a></strong> 接口。 如果一个节点是被 <em><a href="#被生成节点">生成</a></em> 的，则 <code>position</code> 字段一定不存在。</p><p>规范实现 unist 时，被鼓励去定义更多的字段。 生态可以在 <strong><a href="#data">Data</a></strong> 接口上定义字段。</p><p>unist 的任何值 <strong>必须</strong> 被表示为 JSON 值：<code>string</code>，<code>number</code>，<code>object</code>，<code>array</code>，<code>true</code>，<code>false</code>，或 <code>null</code>。 这意味着语法树应该能够被转换为和生成 JSON，并产生相同的树。 例如，在 JavaScript 中，一个树可以通过 <code>JSON.parse(JSON.stringify(tree))</code> 转换为 JSON 并产生相同的树。</p><h4 id="position" tabindex="-1"><code>Position</code> <a class="header-anchor" href="#position" aria-label="Permalink to &quot;\`Position\`&quot;">​</a></h4><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Position {</span></span>
<span class="line"><span>  start: Point</span></span>
<span class="line"><span>  end: Point</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Position</strong> 表示一个节点在源码 <em><a href="#文件">文件</a></em> 中的位置。</p><p><strong>Position</strong> 中的 <code>start</code> 字段表示解析后的源码区域的第一个字符的位置。 <code>start</code> 字段的值实现 <strong><a href="#point">Point</a></strong> 接口。</p><p>在源码 <em><a href="#文件">文件</a></em> 被解析的时候，如果由节点表示的句法单元不存在，则节点被称为 <em><a href="#被生成节点">被生成</a></em>，并且它必须不应该有位置信息。</p><p>举个例子，如果下面的值被表示为 unist:</p><div class="language-markdown line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">alpha</span></span>
<span class="line"><span style="color:#D8DEE9FF;">bravo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第一个单词 (<code>alpha</code>) 开始于第 <code>1</code> 行，第 <code>1</code> 列，第 <code>0</code> 个偏移，并结束于第 <code>1</code> 行，第 <code>6</code> 列，第 <code>5</code> 个偏移。 换行则开始于第 <code>1</code> 行，第 <code>6</code> 列，第 <code>5</code> 个偏移，结束于第 <code>2</code> 行，第 <code>1</code> 列，第 <code>6</code> 个偏移。 最后一个单词 (<code>bravo</code>) 开始于第 <code>2</code> 行，第 <code>1</code> 列，第 <code>6</code> 个偏移，并结束于第 <code>2</code> 行，第 <code>6</code> 列，第 <code>11</code> 个偏移。</p><h4 id="point" tabindex="-1"><code>Point</code> <a class="header-anchor" href="#point" aria-label="Permalink to &quot;\`Point\`&quot;">​</a></h4><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Point {</span></span>
<span class="line"><span>  line: number &gt;= 1</span></span>
<span class="line"><span>  column: number &gt;= 1</span></span>
<span class="line"><span>  offset: number &gt;= 0?</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Point</strong> 代表 <em><a href="#文件">源文件</a></em> 中的一个位置。</p><p><code>line</code> 字段（1开始索引）代表源文件中的一行。 <code>column</code> 字段（1开始索引）代表源文件中的一列。 <code>offset</code> 字段（0开始索引）代表源文件中的一个字符。</p><p>术语字符表示在 <a href="https://webidl.spec.whatwg.org" target="_blank" rel="noreferrer">Web IDL</a> 中的一个 (UTF-16) 编码单元。</p><h4 id="data" tabindex="-1"><code>Data</code> <a class="header-anchor" href="#data" aria-label="Permalink to &quot;\`Data\`&quot;">​</a></h4><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Data { }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Data</strong> 表示与生态系统相关的信息。</p><p>此空间永远不会被 unist 或者实现 unist 的规范指定。</p><h3 id="parent" tabindex="-1"><code>Parent</code> <a class="header-anchor" href="#parent" aria-label="Permalink to &quot;\`Parent\`&quot;">​</a></h3><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Parent &lt;: Node {</span></span>
<span class="line"><span>  children: [Node]</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>节点包含其他节点（被称为 <em><a href="#子节点">子节点</a></em>）继承抽象接口 <strong>Parent</strong>（<strong><a href="#node">Node</a></strong>）。</p><p><code>children</code> 字段表示一个节点的子节点列表。</p><h3 id="literal" tabindex="-1"><code>Literal</code> <a class="header-anchor" href="#literal" aria-label="Permalink to &quot;\`Literal\`&quot;">​</a></h3><div class="language-idl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">idl</span><pre class="shiki nord vp-code"><code><span class="line"><span>interface Literal &lt;: Node {</span></span>
<span class="line"><span>  value: any</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>节点包含一个值，继承抽象接口 <strong>Literal</strong> (<strong><a href="#node">Node</a></strong>)。</p><p><code>value</code> 字段可以包含任何值。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><h3 id="树" tabindex="-1">树 <a class="header-anchor" href="#树" aria-label="Permalink to &quot;树&quot;">​</a></h3><p><strong>树</strong> 是一个包含它的所有 <em><a href="#后代">后代</a></em> 的节点。</p><h3 id="子节点" tabindex="-1">子节点 <a class="header-anchor" href="#子节点" aria-label="Permalink to &quot;子节点&quot;">​</a></h3><p>如果 Y 的 <code>children</code> 包含 X，则 X 是 Y 的 <strong>子节点</strong>。</p><h3 id="父节点" tabindex="-1">父节点 <a class="header-anchor" href="#父节点" aria-label="Permalink to &quot;父节点&quot;">​</a></h3><p>如果 Y 是 X 的一个 <em><a href="#子节点">子节点</a></em>，则 Y 是 X 的 <strong>父节点</strong>。</p><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><p>子节点的 <strong>索引</strong> 是它 <em><a href="#兄弟节点">兄弟节点</a></em> 之前的数字，如果没有的话则为 <code>0</code>。</p><h3 id="兄弟节点" tabindex="-1">兄弟节点 <a class="header-anchor" href="#兄弟节点" aria-label="Permalink to &quot;兄弟节点&quot;">​</a></h3><p>如果 X 和 Y 有相同的 <em><a href="#父节点">父节点</a></em>，则 X 和 Y 是 <strong>兄弟节点</strong>。</p><p><em><a href="#子节点">子节点</a></em> 的 <strong>前兄弟节点</strong> 是它的 <strong>兄弟节点</strong> <em><a href="#索引">索引</a></em> 减 1 的那个。</p><p><em><a href="#子节点">子节点</a></em> 的 <strong>后兄弟节点</strong> 是它的 <strong>兄弟节点</strong> <em><a href="#索引">索引</a></em> 加 1 的那个。</p><h3 id="根节点" tabindex="-1">根节点 <a class="header-anchor" href="#根节点" aria-label="Permalink to &quot;根节点&quot;">​</a></h3><p>如果没有 <em><a href="#父节点">父节点</a></em> 或它的 <em><a href="#父节点">父节点</a></em> 的 <strong>根节点</strong>，则 <strong>根节点</strong> 为它自身。</p><p><em><a href="#树">树</a></em> 的 <strong>根节点</strong> 是 <em><a href="#树">树</a></em> 没有 <em><a href="#父节点">父节点</a></em> 的那个节点。</p><h3 id="后代" tabindex="-1">后代 <a class="header-anchor" href="#后代" aria-label="Permalink to &quot;后代&quot;">​</a></h3><p>如果 X 是 Y 的一个 <em><a href="#子节点">子节点</a></em>，那么节点 X 是 Y 的 <strong>后代</strong>。 或者如果 X 是 Z 的一个 <em><a href="#子节点">子节点</a></em>，且 Z 是 Y 的一个 <strong>后代</strong>，则 X 是 Y 的 <strong>后代</strong>。</p><p>一个 <strong>包含后代</strong> 是一个节点，或者是它的 <strong>后代</strong> 之一。</p><h3 id="祖先" tabindex="-1">祖先 <a class="header-anchor" href="#祖先" aria-label="Permalink to &quot;祖先&quot;">​</a></h3><p>如果 Y 是 X 的一个 <em><a href="#后代">后代</a></em>，则节点 X 是节点 Y 的 <strong>祖先</strong>。</p><p>一个 <strong>包含祖先</strong> 是一个节点，或者是它的 <strong>祖先</strong> 之一。</p><h3 id="头节点" tabindex="-1">头节点 <a class="header-anchor" href="#头节点" aria-label="Permalink to &quot;头节点&quot;">​</a></h3><p>节点的 <strong>头节点</strong> 是它的第一个 <em><a href="#子节点">子节点</a></em>。</p><h3 id="尾节点" tabindex="-1">尾节点 <a class="header-anchor" href="#尾节点" aria-label="Permalink to &quot;尾节点&quot;">​</a></h3><p>节点的 <strong>尾节点</strong> 是它的最后一个 <em><a href="#子节点">子节点</a></em>。</p><h3 id="叶节点" tabindex="-1">叶节点 <a class="header-anchor" href="#叶节点" aria-label="Permalink to &quot;叶节点&quot;">​</a></h3><p><strong>叶节点</strong> 是没有 <em><a href="#子节点">子节点</a></em> 的节点。</p><h3 id="分支节点" tabindex="-1">分支节点 <a class="header-anchor" href="#分支节点" aria-label="Permalink to &quot;分支节点&quot;">​</a></h3><p><strong>分支节点</strong> 是有至少一个 <em><a href="#子节点">子节点</a></em> 的节点。</p><h3 id="被生成节点" tabindex="-1">被生成节点 <a class="header-anchor" href="#被生成节点" aria-label="Permalink to &quot;被生成节点&quot;">​</a></h3><p><strong>被生成节点</strong> 是没有 <em><a href="#位置信息">位置信息</a></em> 的节点。</p><h3 id="类型-1" tabindex="-1">类型 <a class="header-anchor" href="#类型-1" aria-label="Permalink to &quot;类型&quot;">​</a></h3><p>节点的 <strong>类型</strong> 是它的 <code>type</code> 字段的值。</p><h3 id="位置信息" tabindex="-1">位置信息 <a class="header-anchor" href="#位置信息" aria-label="Permalink to &quot;位置信息&quot;">​</a></h3><p>节点的 <strong>位置信息</strong> 是它的 <code>position</code> 字段的值。</p><h3 id="文件" tabindex="-1">文件 <a class="header-anchor" href="#文件" aria-label="Permalink to &quot;文件&quot;">​</a></h3><p><strong>文件</strong> 是一个源文档，代表被解析生成语法树的原始文件。 <em><a href="#位置信息">位置信息</a></em> 表示节点在这个文件中的位置。 文件由主机环境提供，并不由 unist 定义。</p><p>举个例子，参考如 <strong><a href="https://github.com/vfile/vfile" target="_blank" rel="noreferrer">vfile</a></strong> 项目。</p><h3 id="前序遍历" tabindex="-1">前序遍历 <a class="header-anchor" href="#前序遍历" aria-label="Permalink to &quot;前序遍历&quot;">​</a></h3><p>在 <a href="#深度优先遍历">深度优先</a> <a href="#遍历树">树遍历</a> 中，<strong>前序遍历</strong> 为每个节点 <em>N</em> 实现以下步骤：</p><ol><li><strong>N</strong>: 访问 <em>N</em> 自身</li><li><strong>L</strong>: 访问 <em><a href="#头节点">头节点</a></em> (然后是 <em>下一个兄弟节点</em>，递归向前移动直到 <em>尾节点</em>)</li><li><strong>R</strong>: 遍历 <em><a href="#尾节点">尾节点</a></em></li></ol><h3 id="后序遍历" tabindex="-1">后序遍历 <a class="header-anchor" href="#后序遍历" aria-label="Permalink to &quot;后序遍历&quot;">​</a></h3><p>在 <a href="#深度优先遍历">深度优先</a> <a href="#遍历树">树遍历</a> 中，<strong>后序遍历</strong> 为每个节点 <em>N</em> 实现以下步骤：</p><ol><li><strong>L</strong>: 遍历 <em><a href="#头节点">头节点</a></em> (然后是 <em>下一个兄弟节点</em>，递归向前移动直到 <em>尾节点</em>)</li><li><strong>R</strong>: 遍历 <em><a href="#尾节点">尾节点</a></em></li><li><strong>N</strong>: 访问 <em>N</em> 自身</li></ol><h3 id="进入" tabindex="-1">进入 <a class="header-anchor" href="#进入" aria-label="Permalink to &quot;进入&quot;">​</a></h3><p><strong>进入</strong> 就是在当 <strong><a href="#遍历树">遍历</a></strong> 树时，在对给定节点 <em>N</em> 执行其他步骤之前，进行的步骤。</p><p>举个例子，当执行 <em>前序</em> 遍历时，<strong>进入</strong> 是在访问 <em>N</em> 自身之前进行的第一步。</p><h3 id="离开" tabindex="-1">离开 <a class="header-anchor" href="#离开" aria-label="Permalink to &quot;离开&quot;">​</a></h3><p><strong>离开</strong> 就是在当 <strong><a href="#遍历树">遍历</a></strong> 树时，在对给定节点 <em>N</em> 执行其他步骤之后，进行的步骤。</p><p>举个例子，当执行 <em>前序</em> 遍历时，<strong>离开</strong> 是在访问 <em>N</em> 的 <em><a href="#尾节点">尾节点</a></em> 之后进行的最后一步。</p><h2 id="遍历树" tabindex="-1">遍历树 <a class="header-anchor" href="#遍历树" aria-label="Permalink to &quot;遍历树&quot;">​</a></h2><p>当处理 <em><a href="#树">树</a></em> 的查询时，<strong>树的遍历</strong> 是一项常规任务。</p><p>树的遍历可以分为两种：<em>广度优先遍历</em> 和 <em>深度优先遍历</em>。</p><p>在下面的例子中，我们将使用下面的树：</p>`,113),d=t('<h3 id="广度优先遍历" tabindex="-1">广度优先遍历 <a class="header-anchor" href="#广度优先遍历" aria-label="Permalink to &quot;广度优先遍历&quot;">​</a></h3><p><strong>广度优先遍历</strong> 是在遍历 <em><a href="#子节点">子节点</a></em> 之前，访问一个节点并扩大搜索范围到他在同一层级的所有 <em><a href="#兄弟节点">兄弟节点</a></em>。</p><p>在图中定义的语法树，广度优先遍历首先搜索树的根节点（<strong>A</strong>），然后是它的子节点（<strong>B</strong> 和 <strong>F</strong>），然后是它们的子节点（<strong>C</strong>、<strong>D</strong>、<strong>E</strong> 和 <strong>G</strong>）。</p><h3 id="深度优先遍历" tabindex="-1">深度优先遍历 <a class="header-anchor" href="#深度优先遍历" aria-label="Permalink to &quot;深度优先遍历&quot;">​</a></h3><p>取而代之的，更加常用的是 <strong>深度优先遍历</strong>。 搜索是首先是通过遍历 <em><a href="#子节点">子节点</a></em> 进行深入，然后再遍历它的 <em><a href="#兄弟节点">兄弟节点</a></em>。</p><p>在图中定义的语法树，深度优先遍历首先搜索树的根节点（<strong>A</strong>），然后是它的子节点其中之一（<strong>B</strong> 或 <strong>F</strong>），然后是它们的子节点（<strong>C</strong>、<strong>D</strong>、<strong>E</strong> 或 <strong>G</strong>）。</p><p>在给定的有 <em><a href="#子节点">子组件</a></em> 的节点 <em>N</em>，一个 <strong>深度优先遍历</strong> 的实现有三步，简化到二叉树（每个节点都有 <em><a href="#头节点">头节点</a></em> 和 <em><a href="#尾节点">尾节点</a></em>，但没有其他子节点）：</p><ul><li><strong>N</strong>: 访问 <em>N</em> 本身</li><li><strong>L</strong>: 遍历 <em><a href="#头节点">头节点</a></em></li><li><strong>R</strong>: 遍历 <em><a href="#尾节点">尾节点</a></em></li></ul><p>这些步骤可以按任何顺序执行，但对于非二叉树，<strong>L</strong> 和 <strong>R</strong> 同时发生。 如果 <strong>L</strong> 先于 <strong>R</strong> 执行，则遍历被称为 <em>左到右</em> 遍历，否则为 <em>右到左</em> 遍历。</p><p>对于非二叉树，<em>头节点</em> 和 <em>尾节点</em> 之间的其他子节点也会按相同顺序处理，因此对于 <em>左到右</em> 遍历，首先遍历 <em>头节点</em> (<strong>L</strong>)，然后遍历它的 <em>下一个兄弟节点</em>，依此类推，最后遍历 <em>尾节点</em> (<strong>R</strong>)。</p><p>因为对于非二叉树来说，<strong>L</strong> 和 <strong>R</strong> 同时发生，所以我们可以产生四种类型的遍历顺序：NLR、NRL、LRN、RLN。</p><p>NLR 和 LRN（两种 <em>左到右</em> 遍历选项）是最常用的，分别称为 <em><a href="#前序遍历">前序遍历</a></em> 和 <em><a href="#后序遍历">后序遍历</a></em>。</p><p>对于图中定义的语法树而言，<em>前序</em> 和 <em>后序</em> 遍历首先寻找树的根节点（<strong>A</strong>），然后是它的头节点（<strong>B</strong>），然后是它从左到右顺序的子节点（<strong>C</strong>、<strong>D</strong>、<strong>E</strong>）。 在所有 <strong>B</strong> 的 <em><a href="#后代">后代</a></em> 被遍历之后，它的下一个兄弟节点（<strong>F</strong>）被遍历，然后是它的唯一子节点（<strong>G</strong>）。</p><h2 id="工具集" tabindex="-1">工具集 <a class="header-anchor" href="#工具集" aria-label="Permalink to &quot;工具集&quot;">​</a></h2><p><strong>工具集</strong> 是作用节点的函数。</p><p>他们是处理 unist 规范实现节点的一些项目：</p><ul><li><a href="https://github.com/syntax-tree/hast#list-of-utilities" target="_blank" rel="noreferrer">hast 工具集</a></li><li><a href="https://github.com/syntax-tree/mdast#list-of-utilities" target="_blank" rel="noreferrer">mdast 工具集</a></li><li><a href="https://github.com/syntax-tree/nlcst#list-of-utilities" target="_blank" rel="noreferrer">nlcst 工具集</a></li><li><a href="https://github.com/syntax-tree/xast#list-of-utilities" target="_blank" rel="noreferrer">xast 工具集</a></li></ul><h3 id="工具集列表" tabindex="-1">工具集列表 <a class="header-anchor" href="#工具集列表" aria-label="Permalink to &quot;工具集列表&quot;">​</a></h3><ul><li><a href="https://github.com/gorango/unist-util-ancestor" target="_blank" rel="noreferrer"><code>unist-util-ancestor</code></a> — 获取一个或多个节点的共同祖先</li><li><a href="https://github.com/syntax-tree/unist-util-assert" target="_blank" rel="noreferrer"><code>unist-util-assert</code></a> — 断言节点</li><li><a href="https://github.com/syntax-tree/unist-util-filter" target="_blank" rel="noreferrer"><code>unist-util-filter</code></a> — 使用所有的节点创建一个新的树，并传递一个给定的函数</li><li><a href="https://github.com/blahah/unist-util-find" target="_blank" rel="noreferrer"><code>unist-util-find</code></a> — 通过条件寻找节点</li><li><a href="https://github.com/syntax-tree/unist-util-find-after" target="_blank" rel="noreferrer"><code>unist-util-find-after</code></a> — 寻找另一个节点之后的节点</li><li><a href="https://github.com/syntax-tree/unist-util-find-all-after" target="_blank" rel="noreferrer"><code>unist-util-find-all-after</code></a> — 寻找另一个节点或坐标之后的所有节点</li><li><a href="https://github.com/syntax-tree/unist-util-find-all-before" target="_blank" rel="noreferrer"><code>unist-util-find-all-before</code></a> — 寻找另一个节点或坐标之前的所有节点</li><li><a href="https://github.com/mrzmmr/unist-util-find-all-between" target="_blank" rel="noreferrer"><code>unist-util-find-all-between</code></a> — 寻找两个节点或坐标之间的所有节点</li><li><a href="https://github.com/syntax-tree/unist-util-find-before" target="_blank" rel="noreferrer"><code>unist-util-find-before</code></a> — 寻找另一个节点之前的节点</li><li><a href="https://github.com/unicorn-utterances/unist-util-flat-filter" target="_blank" rel="noreferrer"><code>unist-util-flat-filter</code></a> — <code>unist-util-filter</code> 的扁平化映射版本</li><li><a href="https://gitlab.com/staltz/unist-util-flatmap" target="_blank" rel="noreferrer"><code>unist-util-flatmap</code></a> — 通过向一个节点拓展的方式创建一个新的树</li><li><a href="https://github.com/syntax-tree/unist-util-generated" target="_blank" rel="noreferrer"><code>unist-util-generated</code></a> — 检查一个节点是否是被生成的</li><li><a href="https://github.com/syntax-tree/unist-util-index" target="_blank" rel="noreferrer"><code>unist-util-index</code></a> — 通过属性或者计算的键来索引节点</li><li><a href="https://github.com/syntax-tree/unist-util-inspect" target="_blank" rel="noreferrer"><code>unist-util-inspect</code></a> — 节点监测工具</li><li><a href="https://github.com/syntax-tree/unist-util-is" target="_blank" rel="noreferrer"><code>unist-util-is</code></a> — 检查一个节点是否通过测试</li><li><a href="https://github.com/syntax-tree/unist-util-map" target="_blank" rel="noreferrer"><code>unist-util-map</code></a> — 通过映射节点创建一棵树</li><li><a href="https://github.com/syntax-tree/unist-util-modify-children" target="_blank" rel="noreferrer"><code>unist-util-modify-children</code></a> — 修改父节点中的直接子节点</li><li><a href="https://github.com/syntax-tree/unist-util-parents" target="_blank" rel="noreferrer"><code>unist-util-parents</code></a> — 节点的 <code>父节点</code> 引用</li><li><a href="https://github.com/syntax-tree/unist-util-position" target="_blank" rel="noreferrer"><code>unist-util-position</code></a> — 获取节点的坐标信息</li><li><a href="https://github.com/GenerousLabs/unist-util-reduce" target="_blank" rel="noreferrer"><code>unist-util-reduce</code></a> — 递归 reduce 一棵树</li><li><a href="https://github.com/syntax-tree/unist-util-remove" target="_blank" rel="noreferrer"><code>unist-util-remove</code></a> — 从树中移除节点</li><li><a href="https://github.com/syntax-tree/unist-util-remove-position" target="_blank" rel="noreferrer"><code>unist-util-remove-position</code></a> — 移除树中的坐标信息</li><li><a href="https://github.com/unicorn-utterances/unist-util-replace-all-between" target="_blank" rel="noreferrer"><code>unist-util-replace-all-between</code></a> — 在两个节点或者坐标之间替换节点</li><li><a href="https://github.com/syntax-tree/unist-util-select" target="_blank" rel="noreferrer"><code>unist-util-select</code></a> — 通过类 CSS 选择器的方式选择节点</li><li><a href="https://github.com/syntax-tree/unist-util-size" target="_blank" rel="noreferrer"><code>unist-util-size</code></a> — 计算一颗树的节点数量</li><li><a href="https://github.com/syntax-tree/unist-util-source" target="_blank" rel="noreferrer"><code>unist-util-source</code></a> — 获取文件中值的原始数据（节点或者坐标）</li><li><a href="https://github.com/syntax-tree/unist-util-stringify-position" target="_blank" rel="noreferrer"><code>unist-util-stringify-position</code></a> — 字符串化一个节点、位置或点</li><li><a href="https://github.com/syntax-tree/unist-util-visit" target="_blank" rel="noreferrer"><code>unist-util-visit</code></a> — 递归遍历所有节点</li><li><a href="https://github.com/syntax-tree/unist-util-visit-parents" target="_blank" rel="noreferrer"><code>unist-util-visit-parents</code></a> — 通过一堆父节点递归访问节点</li><li><a href="https://github.com/syntax-tree/unist-util-visit-children" target="_blank" rel="noreferrer"><code>unist-util-visit-children</code></a> — 访问父节点的直接子节点</li><li><a href="https://github.com/mrzmmr/unist-util-visit-all-after" target="_blank" rel="noreferrer"><code>unist-util-visit-all-after</code></a> — 访问另一个节点之后的节点</li><li><a href="https://github.com/syntax-tree/unist-builder" target="_blank" rel="noreferrer"><code>unist-builder</code></a> — 创建树的辅助工具</li></ul><h2 id="参考材料" tabindex="-1">参考材料 <a class="header-anchor" href="#参考材料" aria-label="Permalink to &quot;参考材料&quot;">​</a></h2><ul><li><strong>JavaScript</strong>: <a href="https://262.ecma-international.org/9.0/" target="_blank" rel="noreferrer">ECMAScript Language Specification</a>. Ecma International.</li><li><strong>JSON</strong>: <a href="https://datatracker.ietf.org/doc/html/rfc7159" target="_blank" rel="noreferrer">The JavaScript Object Notation (JSON) Data Interchange Format</a>, T. Bray. IETF.</li><li><strong>XML</strong>: <a href="https://www.w3.org/TR/xml/" target="_blank" rel="noreferrer">Extensible Markup Language</a>, T. Bray, J. Paoli, C. Sperberg-McQueen, E. Maler, F. Yergeau. W3C.</li><li><strong>Web IDL</strong>: <a href="https://webidl.spec.whatwg.org" target="_blank" rel="noreferrer">Web IDL</a>, C. McCormack. W3C.</li></ul><h2 id="致谢" tabindex="-1">致谢 <a class="header-anchor" href="#致谢" aria-label="Permalink to &quot;致谢&quot;">​</a></h2><p>最初发行版的作者是：<strong><a href="https://github.com/wooorm" target="_blank" rel="noreferrer">@wooorm</a></strong>。</p><p>特别感谢 <strong><a href="https://github.com/eush77" target="_blank" rel="noreferrer">@eush77</a></strong> 的工作，想法和令人难以置信的有价值的反馈！ 感谢 <strong><a href="https://github.com/anandthakker" target="_blank" rel="noreferrer">@anandthakker</a></strong>, <strong><a href="https://github.com/anko" target="_blank" rel="noreferrer">@anko</a></strong>, <strong><a href="https://github.com/arobase-che" target="_blank" rel="noreferrer">@arobase-che</a></strong>, <strong><a href="https://github.com/azu" target="_blank" rel="noreferrer">@azu</a></strong>, <strong><a href="https://github.com/BarryThePenguin" target="_blank" rel="noreferrer">@BarryThePenguin</a></strong>, <strong><a href="https://github.com/ben-eb" target="_blank" rel="noreferrer">@ben-eb</a></strong>, <strong><a href="https://github.com/blahah" target="_blank" rel="noreferrer">@blahah</a></strong>, <strong><a href="https://github.com/blakeembrey" target="_blank" rel="noreferrer">@blakeembrey</a></strong>, <strong><a href="https://github.com/brainkim" target="_blank" rel="noreferrer">@brainkim</a></strong>, <strong><a href="https://github.com/ChristianMurphy" target="_blank" rel="noreferrer">@ChristianMurphy</a></strong>, <strong><a href="https://github.com/davidtheclark" target="_blank" rel="noreferrer">@davidtheclark</a></strong>, <strong><a href="https://github.com/denysdovhan" target="_blank" rel="noreferrer">@denysdovhan</a></strong>, <strong><a href="https://github.com/derhuerst" target="_blank" rel="noreferrer">@derhuerst</a></strong>, <strong><a href="https://github.com/dozoisch" target="_blank" rel="noreferrer">@dozoisch</a></strong>, <strong><a href="https://github.com/fazouane-marouane" target="_blank" rel="noreferrer">@fazouane-marouane</a></strong>, <strong><a href="https://github.com/gibson042" target="_blank" rel="noreferrer">@gibson042</a></strong>, <strong><a href="https://github.com/hrajchert" target="_blank" rel="noreferrer">@hrajchert</a></strong>, <strong><a href="https://github.com/ikatyang" target="_blank" rel="noreferrer">@ikatyang</a></strong>, <strong><a href="https://github.com/inklesspen" target="_blank" rel="noreferrer">@inklesspen</a></strong>, <strong><a href="https://github.com/izumin5210" target="_blank" rel="noreferrer">@izumin5210</a></strong>, <strong><a href="https://github.com/jasonLaster" target="_blank" rel="noreferrer">@jasonLaster</a></strong>, <strong><a href="https://github.com/JDvorak" target="_blank" rel="noreferrer">@JDvorak</a></strong>, <strong><a href="https://github.com/jlevy" target="_blank" rel="noreferrer">@jlevy</a></strong>, <strong><a href="https://github.com/justjake" target="_blank" rel="noreferrer">@justjake</a></strong>, <strong><a href="https://github.com/kmck" target="_blank" rel="noreferrer">@kmck</a></strong>, <strong><a href="https://github.com/kt3k" target="_blank" rel="noreferrer">@kt3k</a></strong>, <strong><a href="https://github.com/KyleAMathews" target="_blank" rel="noreferrer">@KyleAMathews</a></strong>, <strong><a href="https://github.com/luca3m" target="_blank" rel="noreferrer">@luca3m</a></strong>, <strong><a href="https://github.com/mattdesl" target="_blank" rel="noreferrer">@mattdesl</a></strong>, <strong><a href="https://github.com/muraken720" target="_blank" rel="noreferrer">@muraken720</a></strong>, <strong><a href="https://github.com/mrzmmr" target="_blank" rel="noreferrer">@mrzmmr</a></strong>, <strong><a href="https://github.com/nwtn" target="_blank" rel="noreferrer">@nwtn</a></strong>, <strong><a href="https://github.com/rhysd" target="_blank" rel="noreferrer">@rhysd</a></strong>, <strong><a href="https://github.com/Rokt33r" target="_blank" rel="noreferrer">@Rokt33r</a></strong>, <strong><a href="https://github.com/Sarah-Seo" target="_blank" rel="noreferrer">@Sarah-Seo</a></strong>, <strong><a href="https://github.com/sethvincent" target="_blank" rel="noreferrer">@sethvincent</a></strong>, <strong><a href="https://github.com/shawnbot" target="_blank" rel="noreferrer">@shawnbot</a></strong>, <strong><a href="https://github.com/simov" target="_blank" rel="noreferrer">@simov</a></strong>, <strong><a href="https://github.com/staltz" target="_blank" rel="noreferrer">@staltz</a></strong>, <strong><a href="https://github.com/TitanSnow" target="_blank" rel="noreferrer">@TitanSnow</a></strong>, <strong><a href="https://github.com/tmcw" target="_blank" rel="noreferrer">@tmcw</a></strong>, 和 <strong><a href="https://github.com/vhf" target="_blank" rel="noreferrer">@vhf</a></strong>, 为 unist 和相关项目作出的贡献！</p><h2 id="许可证" tabindex="-1">许可证 <a class="header-anchor" href="#许可证" aria-label="Permalink to &quot;许可证&quot;">​</a></h2><p><a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="noreferrer">CC-BY-4.0</a> © <a href="https://wooorm.com" target="_blank" rel="noreferrer">Titus Wormer</a></p>',26);function u(m,b,f,k,_,x){const a=s("Mermaid");return r(),o("div",null,[p,(r(),i(l,null,{default:e(()=>[h(a,{id:"mermaid-360",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A--%3EB--%3EC%0A%20%20%20%20%20%20%20%20B--%3ED%0A%20%20%20%20%20%20%20%20B--%3EE%0A%20%20%20%20A--%3EF--%3EG%0A"})]),fallback:e(()=>[c(" Loading... ")]),_:1})),d])}const q=n(g,[["render",u]]);export{y as __pageData,q as default};
