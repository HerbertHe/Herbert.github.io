import{_ as s,c as a,o as n,a6 as e}from"./chunks/framework.CRmoCaTl.js";const m=JSON.parse('{"title":"JavaScript的import语法","description":"","frontmatter":{"title":"JavaScript的import语法","date":"2024-04-12T22:38:26.000Z","toc":true,"tags":["javascript","import"]},"headers":[],"relativePath":"posts/zh/JavaScript的import语法.md","filePath":"posts/zh/JavaScript的import语法.md"}'),l={name:"posts/zh/JavaScript的import语法.md"},o=e(`<h2 id="写在前面的" tabindex="-1">写在前面的 <a class="header-anchor" href="#写在前面的" aria-label="Permalink to &quot;写在前面的&quot;">​</a></h2><p><em>dynamic import</em> 是一个熟悉但却有点不太被注意的语法，在按需动态加载的场景下，常常被用来进行异步加载优化。MDN 暂无对这部分的中文技术文档，本篇为 MDN 此部分技术文档的翻译，同样为自己更好理解这部分语法的特性进行备用。</p><h2 id="import" tabindex="-1">import() <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import()&quot;">​</a></h2><p><code>import()</code> 语法，通常被称作 <code>dynamic import</code>，它是一个类函数表达式，允许异步和动态加载 ECMAScript 模块到一个潜在的非模块化(non-module) 环境中。</p><p>与 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer">声明式导入</a> 不同，dynamic import 只在被需要的时候被计算，并允许更大的句法灵活性。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">moduleName</span><span style="color:#D8DEE9FF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>import()</code> 的调用非常类似于一个函数调用，但是 <code>import</code> 本身是一个关键字，并不是一个函数。你不能用类似 <code>const myImport=import</code> 的语句进行别名，否则将会抛出一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError" target="_blank" rel="noreferrer">SyntaxError</a></p><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><p><code>moduleName</code></p><p>导入的模块来源。标识符的计算是由主机指定的，但是总遵循着与静态 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer">import 声明</a> 一致的算法。</p><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>返回一个状态为 fulfilled，值为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import#module_namespace_object" target="_blank" rel="noreferrer">模块命名空间对象(module namespace object)</a> 的 promise：一个包含从 <code>moduleName</code> 所有导出的对象。</p><p><code>import()</code> 的计算从不会同步抛出错误，<code>moduleName</code> 是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion" target="_blank" rel="noreferrer">被强制要求为字符串</a>，如果抛出错误，则 promise 的状态为 reject 并且值为被抛出的错误。</p><h3 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h3><p>import 声明语法 (import something from &quot;somewhere&quot;) 是静态的，并且总是在加载的时候才会计算导入的模块结果。Dynamic imports 允许绕过 import 声明的句法强制，并在需要的时候才加载模块。下面是你可能需要使用 dynamic import 的理由：</p><ul><li>当静态导入严重拖慢了代码的加载速度或者增加程序内存使用，那么加载缓慢可能即是与导入的代码相关，你可以在之后需要的时候再进行导入。</li><li>当导入的模块在加载之时并不存在。</li><li>当 import 标识符需要被动态构造。（静态导入只支持静态标识符。）</li><li>当模块的导入有副作用，并且你只想在受控的情况下才需要这些副作用。（并不建议在模块中有任何副作用，但是有些时候你无法控制模块的依赖。）</li><li>当在非模块环境中（例如：<code>eval</code> 或者 script 文件）。</li></ul><p>只有在必要的时候再使用 dynamic import，静态形式非常适合加载初始化依赖，并且可以更加容易在静态分析工具和 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking" target="_blank" rel="noreferrer">tree shaking</a> 中受益。</p><p>如果你的文件并不是如模块化运行的（在 HTML 文件中引用，script 标签必须有 <code>type=&quot;module&quot;</code> 属性），你将无法使用静态声明，但是异步动态导入语法仍然可用，并且运行你将模块导入非模块环境中。</p><p>动态模块导入并不是在所有的执行上下文中都被允许。举个例子，<code>import()</code> 可以被用于主线程、shared worker，或者 dedicated worker，但是当在 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="noreferrer">service worker</a> 或者 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worklet" target="_blank" rel="noreferrer">worklet</a> 中被调用的时候会报错。</p><h3 id="模块命名空间对象" tabindex="-1">模块命名空间对象 <a class="header-anchor" href="#模块命名空间对象" aria-label="Permalink to &quot;模块命名空间对象&quot;">​</a></h3><p><strong>模块命名空间对象</strong> 是用于描述从模块中所有导出的对象。当模块被计算的时候，它就会被创建为一个静态对象。有两种从模块访问命名对象的方法：通过 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#namespace_import" target="_blank" rel="noreferrer">命名空间导入 namespace import</a> (<code>import * as name from moduleName</code>)，或者通过 dynamic import 导入 fulfill 的值。</p><p>模块命名空间对象是一个有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects" target="_blank" rel="noreferrer"><code>null</code> 原型</a> 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed" target="_blank" rel="noreferrer">sealed</a> 对象。这也就意味着对象的所有字符串字段键与模块的导出有关，并且不存在额外的字段键。所有的键按字典顺序是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties" target="_blank" rel="noreferrer">可被枚举的</a>。（举个例子，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description" target="_blank" rel="noreferrer"><code>Array.prototype.sort()</code></a> 的默认行为），默认导出可以通过 <code>default</code> 键进行调用。另外，模块命名空间对象有一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noreferrer"><code>@@toStringTag</code></a> 属性值为 <code>&quot;Module&quot;</code>，被用于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString" target="_blank" rel="noreferrer"><code>Object.prototype.toString()</code></a>。</p><p>字符串属性是不可被配置的(non-configurable) 和 可写的(writable)，当你使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors" target="_blank" rel="noreferrer"><code>Object.getOwnPropertyDescriptor()</code></a> 获取他们的描述符的时候。所以，他们是有效只读的，因为你不能将属性赋予新的值。与之相对应的是，静态导入创建 &quot;<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#imported_values_can_only_be_modified_by_the_exporter" target="_blank" rel="noreferrer">live bindings</a>&quot;——值可以被导出他们的模块重新赋值，但是不能被导入模块赋值。可写的属性反应了值被修改的可能性，因为不可被配置和不可被写的属性一定是常量。举个例子，你可以对导出的变量值进行重新赋值，新的值将会被模块命名空间对象所观察到。</p><p>每个模块标识符都与唯一的模块命名空间对象相关，下面的代码通常是正确的：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">import</span><span style="color:#81A1C1;"> *</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> mod</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">mod2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">mod</span><span style="color:#81A1C1;"> ===</span><span style="color:#D8DEE9;"> mod2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // true</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>除了一种奇异的情况：因为 promise 永远不会被 fulfilled 为一个 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#thenables" target="_blank" rel="noreferrer">thenable</a>，如果 <code>my-module.js</code> 模块导出了一个函数叫做 <code>then()</code>，函数将会自动在 dynamic import 的 promise 被 fulfilled 的时候被调用，作为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise#the_resolve_function" target="_blank" rel="noreferrer">promise resolution</a> 进程的一部分。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// my-module.js</span></span>
<span class="line"><span style="color:#81A1C1;">export</span><span style="color:#81A1C1;"> function</span><span style="color:#88C0D0;"> then</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">resolve</span><span style="color:#ECEFF4;">)</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">then() called</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#88C0D0;">    resolve</span><span style="color:#D8DEE9FF;">(</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// main.js</span></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#81A1C1;"> *</span><span style="color:#81A1C1;"> as</span><span style="color:#8FBCBB;"> mod</span><span style="color:#81A1C1;"> from</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">mod2</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#616E88;">    // Logs &quot;then() called&quot;</span></span>
<span class="line"><span style="color:#D8DEE9;">    console</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">log</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">mod</span><span style="color:#81A1C1;"> ===</span><span style="color:#D8DEE9;"> mod2</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span><span style="color:#616E88;"> // false</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>注意：不要从模块中导出一个叫做 <code>then()</code> 的函数。这会导致在动态导入的时候与静态导入的行为不一致。</p></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="仅为副作用导入一个模块" tabindex="-1">仅为副作用导入一个模块 <a class="header-anchor" href="#仅为副作用导入一个模块" aria-label="Permalink to &quot;仅为副作用导入一个模块&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">somethingIsTrue</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#616E88;">        // import module for side effects</span></span>
<span class="line"><span style="color:#81A1C1;">        await</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/modules/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">    }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果你的项目使用导出的 ESM 包，你也可以仅为了副作用导入他们。将仅会在包导入的入口文件（或者导入的文件）运行这些代码。</p><h3 id="导入默认" tabindex="-1">导入默认 <a class="header-anchor" href="#导入默认" aria-label="Permalink to &quot;导入默认&quot;">​</a></h3><p>你需要解构返回的对象，并且对 &quot;default&quot; 键进行重命名。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">async</span><span style="color:#ECEFF4;"> ()</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#81A1C1;">    if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#D8DEE9;">somethingIsTrue</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#81A1C1;">      const</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        default</span><span style="color:#ECEFF4;">:</span><span style="color:#D8DEE9;"> myDefault</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">        foo</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9;">        bar</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/modules/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#D8DEE9FF;">)()</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="根据用户的动作响应时导入" tabindex="-1">根据用户的动作响应时导入 <a class="header-anchor" href="#根据用户的动作响应时导入" aria-label="Permalink to &quot;根据用户的动作响应时导入&quot;">​</a></h3><p>这个例子展示了如何基于用户的动作来向页面加载功能，这个例子是按钮点击，在模块中调用功能。这并不是实现功能的唯一方式。<code>import()</code> 函数也支持 <code>await</code>。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> main</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">querySelector</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">main</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">const</span><span style="color:#D8DEE9;"> link</span><span style="color:#81A1C1;"> of</span><span style="color:#D8DEE9;"> document</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">querySelectorAll</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">nav &gt; a</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  link</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">addEventListener</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">click</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9;">e</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">    e</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">preventDefault</span><span style="color:#D8DEE9FF;">()</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">/modules/my-module.js</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">      .</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">module</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#8FBCBB;">        module</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">loadPageInto</span><span style="color:#D8DEE9FF;">(</span><span style="color:#D8DEE9;">main</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#ECEFF4;">      .</span><span style="color:#88C0D0;">catch</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">err</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">        main</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">textContent</span><span style="color:#81A1C1;"> =</span><span style="color:#D8DEE9;"> err</span><span style="color:#ECEFF4;">.</span><span style="color:#D8DEE9;">message</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">      }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">  }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="基于环境导入不同的模块" tabindex="-1">基于环境导入不同的模块 <a class="header-anchor" href="#基于环境导入不同的模块" aria-label="Permalink to &quot;基于环境导入不同的模块&quot;">​</a></h3><p>在例如服务端渲染的处理中，你可与需要在服务端或者浏览器端加载不同的逻辑，因为他们有着不同的全局环境或者模块（举个例子，浏览器代码有访问如 <code>document</code> 和 <code>navigator</code> 的 web APIs 权限，而服务端代码有当问服务器文件系统的权限）。你可以通过控制 dynamic import 来实现。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">let</span><span style="color:#D8DEE9;"> myModule</span><span style="color:#81A1C1;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">if</span><span style="color:#D8DEE9FF;"> (</span><span style="color:#81A1C1;">typeof</span><span style="color:#D8DEE9;"> window</span><span style="color:#81A1C1;"> ===</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">undefined</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">) </span><span style="color:#ECEFF4;">{</span></span>
<span class="line"><span style="color:#D8DEE9;">  myModule</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">module-used-on-server</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span><span style="color:#81A1C1;"> else</span><span style="color:#ECEFF4;"> {</span></span>
<span class="line"><span style="color:#D8DEE9;">  myModule</span><span style="color:#81A1C1;"> =</span><span style="color:#81A1C1;"> await</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">module-used-in-browser</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#D8DEE9FF;">)</span><span style="color:#81A1C1;">;</span></span>
<span class="line"><span style="color:#ECEFF4;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="非文本-non-literal-标识符导入模块" tabindex="-1">非文本 (non-literal) 标识符导入模块 <a class="header-anchor" href="#非文本-non-literal-标识符导入模块" aria-label="Permalink to &quot;非文本 (non-literal) 标识符导入模块&quot;">​</a></h3><p>Dynamic import 运行任何表达式作为模块标识符，并不一定非要是字符串文本。</p><p>这里，我们导入了10个模块，<code>/modules/module-0.js</code>、<code>/modules/module-1.js</code> 等等，同时，调用了每个模块导出的 <code>load</code> 函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#8FBCBB;">Promise</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">all</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#D8DEE9;">  Array</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">from</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">{</span><span style="color:#88C0D0;"> length</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;"> 10</span><span style="color:#ECEFF4;"> }</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">map</span><span style="color:#D8DEE9FF;">(</span></span>
<span class="line"><span style="color:#ECEFF4;">    (</span><span style="color:#D8DEE9;">_</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> index</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#81A1C1;"> import</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">\`</span><span style="color:#A3BE8C;">/modules/module-</span><span style="color:#81A1C1;">\${</span><span style="color:#D8DEE9;">index</span><span style="color:#81A1C1;">}</span><span style="color:#A3BE8C;">.js</span><span style="color:#ECEFF4;">\`</span><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  )</span><span style="color:#ECEFF4;">,</span></span>
<span class="line"><span style="color:#D8DEE9FF;">)</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">then</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">modules</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#D8DEE9;"> modules</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">forEach</span><span style="color:#D8DEE9FF;">(</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">module</span><span style="color:#ECEFF4;">)</span><span style="color:#81A1C1;"> =&gt;</span><span style="color:#8FBCBB;"> module</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">load</span><span style="color:#D8DEE9FF;">()))</span><span style="color:#81A1C1;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,47),p=[o];function r(t,c,i,E,y,d){return n(),a("div",null,p)}const b=s(l,[["render",r]]);export{m as __pageData,b as default};
