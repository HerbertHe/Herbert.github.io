import{_ as s,c as n,o as l,a6 as a,ab as t,ac as e,ad as p}from"./chunks/framework.BDSt01_6.js";const F=JSON.parse('{"title":"Verilog HDL基础语法（上）","description":"","frontmatter":{"title":"Verilog HDL基础语法（上）","date":"2019-07-18T10:42:34.000Z","toc":true,"tags":["Verilog","HDL","硬件开发","数字电子技术","FPGA"]},"headers":[],"relativePath":"posts/zh/Verilog-HDL基础语法（上）.md","filePath":"posts/zh/Verilog-HDL基础语法（上）.md"}'),r={name:"posts/zh/Verilog-HDL基础语法（上）.md"},o=a(`<h2 id="写在前面的" tabindex="-1">写在前面的 <a class="header-anchor" href="#写在前面的" aria-label="Permalink to &quot;写在前面的&quot;">​</a></h2><p>本博客是对于自己接触基于Verilog硬件开发学习的基础语法学习笔记！接触Verilog之前一定要有《数字电子技术》的基础！</p><p>Verilog HDL是一门硬件描述性语言，可以类似于软件开发一样去做硬件开发。符合“顶层设计”，与传统的搭电路是不一样的，学习过C之类的会更容易。</p><p>对于基础概念和简介在此跳过了！！<strong>Verilog大小写敏感！</strong></p><p>关于寄存器、锁存器、触发器可以参考 <a href="https://blog.csdn.net/hengzo/article/details/53164626" target="_blank" rel="noreferrer">锁存器与寄存器的区别</a></p><h2 id="verilog的注释" tabindex="-1">Verilog的注释 <a class="header-anchor" href="#verilog的注释" aria-label="Permalink to &quot;Verilog的注释&quot;">​</a></h2><p>和C一样，<code>//</code> 为单行注释，<code>/* */</code>为多行注释</p><h2 id="module初探" tabindex="-1">module初探 <a class="header-anchor" href="#module初探" aria-label="Permalink to &quot;module初探&quot;">​</a></h2><p>module模块由module和endmodule包裹</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">module</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">模块名</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">(</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">端口列表</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">)</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">端口说明</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">内部信号说明</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">功能定义</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#81A1C1;">endmodule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>端口：相当于硬件的pin <strong>模块通过端口与外部通信</strong></li><li>端口说明：input和output（输入or输出）</li></ul><p><img src="`+t+`" alt="输入输出"></p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">module</span><span style="color:#D8DEE9FF;"> block(a,b,c,d);</span></span>
<span class="line"><span style="color:#616E88;">    // 端口说明</span></span>
<span class="line"><span style="color:#81A1C1;">    input</span><span style="color:#D8DEE9FF;"> a,b;</span></span>
<span class="line"><span style="color:#81A1C1;">    output</span><span style="color:#D8DEE9FF;"> c,d;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">    // 不指明内部信号说明，默认为wire</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">    // 功能定义</span></span>
<span class="line"><span style="color:#81A1C1;">    assign</span><span style="color:#D8DEE9FF;"> c</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">|</span><span style="color:#D8DEE9FF;"> b;</span></span>
<span class="line"><span style="color:#81A1C1;">    assign</span><span style="color:#D8DEE9FF;"> d</span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;">a </span><span style="color:#81A1C1;">&amp;</span><span style="color:#D8DEE9FF;"> b;</span></span>
<span class="line"><span style="color:#81A1C1;">endmodule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="verilog基础" tabindex="-1">Verilog基础 <a class="header-anchor" href="#verilog基础" aria-label="Permalink to &quot;Verilog基础&quot;">​</a></h2><h3 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h3><ol><li>空白符：空格、tabs、换行</li><li>标识符：对象的名字</li><li>关键字：比如module之类的</li><li>LSB：最低有效位</li><li>MSB：最高有效位</li></ol><h3 id="verilog的四值逻辑系统" tabindex="-1">Verilog的四值逻辑系统 <a class="header-anchor" href="#verilog的四值逻辑系统" aria-label="Permalink to &quot;Verilog的四值逻辑系统&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">逻辑值</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">0</td><td style="text-align:left;">低位，逻辑假</td></tr><tr><td style="text-align:center;">1</td><td style="text-align:left;">高位，逻辑真</td></tr><tr><td style="text-align:center;">x或X</td><td style="text-align:left;">不定态</td></tr><tr><td style="text-align:center;">z或Z</td><td style="text-align:left;">高阻态</td></tr></tbody></table><h3 id="常量及其表示" tabindex="-1">常量及其表示 <a class="header-anchor" href="#常量及其表示" aria-label="Permalink to &quot;常量及其表示&quot;">​</a></h3><p>常量分为整数型和实数型</p><ol><li><p>整数的大小可以定义也可不。表示为：</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">size</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">&#39;</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">base</span><span style="color:#81A1C1;">&gt;&lt;</span><span style="color:#D8DEE9FF;">value</span><span style="color:#81A1C1;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>size：位数大小，由十进制数表示。<strong>缺省为32位</strong></li><li>base：数基，2(b),8(o),10(d),16(h)进制。<strong>缺省为10进制</strong></li><li>value：基内的有效数字</li></ul><blockquote><p>注意：规定了位数大小，如果值超过位数会舍掉超过的高位！</p></blockquote></li><li><p>实数常量可以用十进制数或科学计数法表示</p><table><thead><tr><th style="text-align:center;">实例</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">12</td><td style="text-align:left;">未规定大小的十进制数</td></tr><tr><td style="text-align:center;">&#39;h83a</td><td style="text-align:left;">未规定大小的十六进制数</td></tr><tr><td style="text-align:center;">8&#39;b1100 0001</td><td style="text-align:left;">八位二进制数</td></tr><tr><td style="text-align:center;">16&#39;hff01</td><td style="text-align:left;">十六位十六进制数</td></tr><tr><td style="text-align:center;">32&#39;bz01x</td><td style="text-align:left;">Z扩展至32位</td></tr><tr><td style="text-align:center;">3&#39;b1010 1101</td><td style="text-align:left;">3位数字，3&#39;b101</td></tr><tr><td style="text-align:center;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:center;">6.3</td><td style="text-align:left;">十进制数</td></tr><tr><td style="text-align:center;">32e-4</td><td style="text-align:left;">0.0032的科学计数法表示</td></tr><tr><td style="text-align:center;">4.1E3</td><td style="text-align:left;">4100的科学计数法表示</td></tr></tbody></table></li><li><p>注意的一些点</p><p>整数：</p><ul><li>size缺省即32位</li><li>数基缺省即10进制</li><li>数基和数字中字母无大小写之分</li><li>value大于指定大小时，截去高位2&#39;b1101 =&gt; 2&#39;b01</li></ul><p>实数：</p><ul><li>可以用十进制或者科学计数法表示</li><li>表示方法，略，见上面表格的例子</li></ul></li></ol><h3 id="字符串-仅用在测试中" tabindex="-1">字符串（仅用在测试中） <a class="header-anchor" href="#字符串-仅用在测试中" aria-label="Permalink to &quot;字符串（仅用在测试中）&quot;">​</a></h3><p>大多用于显示信息的命令中，由一对双引号包裹！</p><ul><li>不能跨行</li><li>可以使用格式符，比如：%b</li><li>可以使用转义符，比如：\\t</li></ul><h3 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h3><ul><li>对象名字</li><li>必须以( a-z, A-Z )或( _ )开头，后面可以是字母、数字、( $ )或( _ )</li><li>最长1023个字符</li><li>区分大小写</li></ul><blockquote><p><strong>所有的Verilog的关键字都是小写字母！</strong></p></blockquote><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><ol><li><p>线网类型（net type）：表示Verilog结构化元件间的物理连线。缺省为z。</p><p>需要被持续驱动，门或者模块都可以！net驱动器值变化时，新值被传送到net上。</p><table><thead><tr><th style="text-align:center;">net类型</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">wire, tri</td><td style="text-align:left;">标准内部连接线（缺省）</td></tr><tr><td style="text-align:center;">supply1, supply0</td><td style="text-align:left;">电源和地</td></tr><tr><td style="text-align:center;">wor, trior</td><td style="text-align:left;">多驱动源线或</td></tr><tr><td style="text-align:center;">wand, triand</td><td style="text-align:left;">多驱动源线与</td></tr><tr><td style="text-align:center;">trireg</td><td style="text-align:left;">能保存电荷的net</td></tr><tr><td style="text-align:center;">tri1, tri0</td><td style="text-align:left;">无驱动时上拉/下拉</td></tr></tbody></table><blockquote><p>可综合的线网数据类型：<strong>wire</strong>、wor、wand、tri、supply1、supply0。缺省默认为1位wire！！！</p></blockquote><p>使用语法：</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">net类型</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;"> [msb:lsb] net1, net2, ..., netN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>寄存器类型（register type）：表示一个抽象的数据存储单元，只能在always和initial等过程语句中被赋值，并且它的值从一个赋值到另一个赋值被保存下来。缺省为x。</p><table><thead><tr><th style="text-align:center;">寄存器类型</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">reg</td><td style="text-align:left;">最常用，无符号型</td></tr><tr><td style="text-align:center;">integer</td><td style="text-align:left;">32位有符号整型，算术操作产生二进制补码形式。通常不用于由硬件实现的数据处理</td></tr><tr><td style="text-align:center;">real</td><td style="text-align:left;">双精度的带符号的浮点变量，用法上同</td></tr><tr><td style="text-align:center;">time</td><td style="text-align:left;">64位无符号整数变量，用于<strong>仿真时间</strong>保存与处理</td></tr><tr><td style="text-align:center;">realtime</td><td style="text-align:left;">上同，但可以<strong>用于实数仿真时间</strong>保存与处理</td></tr></tbody></table><p>reg使用语法：</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">reg</span><span style="color:#D8DEE9FF;"> [msb:lsb] reg1, reg2, ..., regN              </span><span style="color:#616E88;">// [msb:lsb]缺省即1位</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>integer使用语法：</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">integer</span><span style="color:#D8DEE9FF;"> A, B, C;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>参数</p><p>参数是一个常量，<strong>建议常量使用大写字母，变量使用小写字母</strong></p><p>定义语法：</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">parameter</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">list_of_assignment</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">;          </span><span style="color:#616E88;">// 多个使用逗号隔开</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">examples:</span></span>
<span class="line"><span style="color:#81A1C1;">parameter</span><span style="color:#D8DEE9FF;"> WIDTH </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 8&#39;h20</span><span style="color:#D8DEE9FF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">parameter</span><span style="color:#D8DEE9FF;"> WORD_WIDTH </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">;</span></span>
<span class="line"><span style="color:#81A1C1;">wire</span><span style="color:#D8DEE9FF;">[WORD_WIDTH:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] int1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">parameter</span><span style="color:#D8DEE9FF;"> WORD_WIDTH </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 32</span><span style="color:#D8DEE9FF;">, ADDR_WIDTH </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 8</span><span style="color:#D8DEE9FF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>参数的定义是 <strong>局部的</strong>，只在 <strong>当前模块</strong> 有效。和 \`define有区别 ！</p></blockquote></li><li><p>位选择</p><p>位选择从向量中抽取特定的位，整数不能作为位向量访问。</p></li><li><p>常见信号类型</p><ul><li>寄存器类型：reg（在always等过程快中被赋值的信号，往往代表触发器，但是不一定）<strong>时序逻辑电路中常常被综合为D触发器，纯组合逻辑电路中被组合为连线</strong></li><li>连线类型：wire：用assign关键字给指定连续/持续赋值所描述的组合逻辑信号或者连线。</li></ul></li></ol><p>Verilog中reg与wire不同点举例 <a href="https://max.book118.com/html/2017/0523/108520648.shtm" target="_blank" rel="noreferrer">参考PPT</a></p><p><img src="`+e+`" alt="图片"></p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 用寄存器类型变量生成组合逻辑</span></span>
<span class="line"><span style="color:#81A1C1;">module</span><span style="color:#D8DEE9FF;"> rw1(a, b, out1, out2);</span></span>
<span class="line"><span style="color:#81A1C1;">    input</span><span style="color:#D8DEE9FF;"> a, b;</span></span>
<span class="line"><span style="color:#81A1C1;">    output</span><span style="color:#D8DEE9FF;"> out1, out2;</span></span>
<span class="line"><span style="color:#81A1C1;">    reg</span><span style="color:#D8DEE9FF;"> out1;</span></span>
<span class="line"><span style="color:#81A1C1;">    wire</span><span style="color:#D8DEE9FF;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    assign</span><span style="color:#D8DEE9FF;"> out2 </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> a;</span></span>
<span class="line"><span style="color:#81A1C1;">    always</span><span style="color:#D8DEE9FF;"> @(b) out1 </span><span style="color:#81A1C1;">=</span><span style="color:#81A1C1;"> ~</span><span style="color:#D8DEE9FF;">b;</span></span>
<span class="line"><span style="color:#81A1C1;">endmodule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="`+p+`" alt="图片"></p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 用寄存器生成触发器</span></span>
<span class="line"><span style="color:#81A1C1;">module</span><span style="color:#D8DEE9FF;"> rw2(clk, d, out1, out2);</span></span>
<span class="line"><span style="color:#81A1C1;">    input</span><span style="color:#D8DEE9FF;"> clk, b;</span></span>
<span class="line"><span style="color:#81A1C1;">    output</span><span style="color:#D8DEE9FF;"> out1, out2;</span></span>
<span class="line"><span style="color:#81A1C1;">    reg</span><span style="color:#D8DEE9FF;"> out1;</span></span>
<span class="line"><span style="color:#81A1C1;">    wire</span><span style="color:#D8DEE9FF;"> out2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">    assign</span><span style="color:#D8DEE9FF;"> out2 </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">&amp;</span><span style="color:#81A1C1;"> ~</span><span style="color:#D8DEE9FF;">out1;</span></span>
<span class="line"><span style="color:#81A1C1;">    always</span><span style="color:#D8DEE9FF;"> @(</span><span style="color:#81A1C1;">posedge</span><span style="color:#D8DEE9FF;"> clk)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        out1 </span><span style="color:#81A1C1;">&lt;=</span><span style="color:#D8DEE9FF;"> d;</span></span>
<span class="line"><span style="color:#81A1C1;">endmodule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="verilog的运算符" tabindex="-1">Verilog的运算符 <a class="header-anchor" href="#verilog的运算符" aria-label="Permalink to &quot;Verilog的运算符&quot;">​</a></h3><p>不面向纯的编程小白，在此就不细解释了，和其他语言大都一样。</p><table><thead><tr><th style="text-align:center;">算术及逻辑运算符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:left;">加</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:left;">减</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:left;">乘</td></tr><tr><td style="text-align:center;">/</td><td style="text-align:left;">整除</td></tr><tr><td style="text-align:center;">%</td><td style="text-align:left;">取模</td></tr><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:left;">逻辑与</td></tr><tr><td style="text-align:center;">丨丨</td><td style="text-align:left;">逻辑或</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:left;">逻辑非</td></tr></tbody></table><p>注意：</p><ol><li>将负数赋值给reg或其他无符号变量，使用2的补码算术</li><li>如果一位操作数是x或z，则结果为x</li><li>模运算使用第一个操作数的符号</li><li>integer和reg算术有差异，一个有符号，一个没有</li></ol><table><thead><tr><th style="text-align:center;">按位操作运算符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">~</td><td style="text-align:left;">一元非</td></tr><tr><td style="text-align:center;">&amp;</td><td style="text-align:left;">二元与</td></tr><tr><td style="text-align:center;">丨</td><td style="text-align:left;">二元或</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:left;">二元异或</td></tr><tr><td style="text-align:center;">~^, ^~</td><td style="text-align:left;">二元异或非</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">关系运算符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">&gt;</td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:left;">不小于</td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:left;">不大于</td></tr></tbody></table><table><thead><tr><th style="text-align:center;">相等操作符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">==</td><td style="text-align:left;">逻辑等</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:left;">逻辑不等</td></tr><tr><td style="text-align:center;">===</td><td style="text-align:left;">相同（case等）</td></tr><tr><td style="text-align:center;">!==</td><td style="text-align:left;">不相同（case不等）</td></tr></tbody></table><p>注意：</p><ul><li>对于有值不确定的位，确定的位相等，结果为x</li><li>===左右值（包含x,z）相同为一，不可被综合！</li></ul><h4 id="条件操作符" tabindex="-1">条件操作符 <a class="header-anchor" href="#条件操作符" aria-label="Permalink to &quot;条件操作符&quot;">​</a></h4><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">LHS</span><span style="color:#81A1C1;">&gt;=&lt;</span><span style="color:#D8DEE9FF;">condition</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">?</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">true_expression</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">:</span><span style="color:#81A1C1;">&lt;</span><span style="color:#D8DEE9FF;">false_expression</span><span style="color:#81A1C1;">&gt;</span><span style="color:#D8DEE9FF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>与其他语言一样，缺少参数会出现错误！</p><table><thead><tr><th style="text-align:center;">移位操作符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:left;">左移</td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:left;">右移</td></tr></tbody></table><p>第二位操作数为无符号数！</p><h4 id="连接操作" tabindex="-1">连接操作 <a class="header-anchor" href="#连接操作" aria-label="Permalink to &quot;连接操作&quot;">​</a></h4><p>将小表达式合并成大表达式！</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">{expr1, expr2, expr3, ..., exprN}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">// 实例</span></span>
<span class="line"><span style="color:#81A1C1;">wire</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">9</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] d;</span></span>
<span class="line"><span style="color:#81A1C1;">wire</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">9</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] a;</span></span>
<span class="line"><span style="color:#81A1C1;">assign</span><span style="color:#D8DEE9FF;"> d[</span><span style="color:#B48EAD;">9</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">] </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {a[</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">], a[</span><span style="color:#B48EAD;">1</span><span style="color:#D8DEE9FF;">], a[</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">], a[</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">], a[</span><span style="color:#B48EAD;">4</span><span style="color:#D8DEE9FF;">]};  </span><span style="color:#616E88;">// 以反转的顺序把a的低五位赋值给d的高五位</span></span>
<span class="line"></span>
<span class="line"><span style="color:#81A1C1;">assign</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {d[</span><span style="color:#B48EAD;">4</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">], d[</span><span style="color:#B48EAD;">9</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">]};  </span><span style="color:#616E88;">// 高五位与低五位交换</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>！！不允许连接非定长常数！！</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">reg</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">16</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] a;</span></span>
<span class="line"><span style="color:#81A1C1;">reg</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">31</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] d;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#D8DEE9FF;">d </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {a,</span><span style="color:#B48EAD;">5</span><span style="color:#D8DEE9FF;">};           </span><span style="color:#616E88;">// 不允许连接非定长常数</span></span>
<span class="line"><span style="color:#D8DEE9FF;">d </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {a, </span><span style="color:#B48EAD;">16&#39;h0005</span><span style="color:#D8DEE9FF;">}    </span><span style="color:#616E88;">// 左边32位，右边33位，位宽不匹配，一样会报错</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="复制操作" tabindex="-1">复制操作 <a class="header-anchor" href="#复制操作" aria-label="Permalink to &quot;复制操作&quot;">​</a></h4><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">{repetition_number{expr1, expr2, ..., exprN}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>复制指定重复次数来执行操作</p><div class="language-verilog line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">verilog</span><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#616E88;">// 实例</span></span>
<span class="line"><span style="color:#81A1C1;">wire</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">7</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] d;</span></span>
<span class="line"><span style="color:#81A1C1;">wire</span><span style="color:#D8DEE9FF;"> [</span><span style="color:#B48EAD;">11</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">0</span><span style="color:#D8DEE9FF;">] a;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">...</span></span>
<span class="line"><span style="color:#81A1C1;">assign</span><span style="color:#D8DEE9FF;"> d </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> {</span><span style="color:#B48EAD;">2</span><span style="color:#D8DEE9FF;">{</span><span style="color:#B48EAD;">4&#39;b1011</span><span style="color:#D8DEE9FF;">}};          </span><span style="color:#616E88;">// d =&gt; 8&#39;b1011 1011</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;">/* 符号扩展 */</span></span>
<span class="line"><span style="color:#D8DEE9FF;">{</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">{</span><span style="color:#B48EAD;">1&#39;b1</span><span style="color:#D8DEE9FF;">}}   </span><span style="color:#616E88;">// 结果为3&#39;b111</span></span>
<span class="line"><span style="color:#D8DEE9FF;">{</span><span style="color:#B48EAD;">3</span><span style="color:#D8DEE9FF;">{Ack}}    </span><span style="color:#616E88;">// 和{Ack, Ack, Ack}相同</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,58),i=[o];function c(d,y,b,g,E,u){return l(),n("div",null,i)}const m=s(r,[["render",c]]);export{F as __pageData,m as default};
